<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据挖掘期末复习</title>
      <link href="/2019/12/17/data-mining/"/>
      <url>/2019/12/17/data-mining/</url>
      
        <content type="html"><![CDATA[<h1 id="复习笔记"><a href="#复习笔记" class="headerlink" title="复习笔记"></a>复习笔记</h1><h2 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h2><ul><li>数据挖掘：数据中的知识发现（KDD）<ol><li>数据清理</li><li>数据集成</li><li>数据选择</li><li>数据变换</li><li>数据挖掘</li><li>模式评估</li><li>知识表示</li></ol></li><li>数据仓库：是一个从多个数据源收集的信息存储库，存放在一致的模式下，并且通常驻留在单个站点。</li><li>数据挖掘功能<ol><li>特征化和区分</li><li>频繁模式</li><li>关联和相关性挖掘</li><li>分类和回归</li><li>聚类分析</li><li>离群点检测</li></ol></li></ul><hr><h2 id="认识数据"><a href="#认识数据" class="headerlink" title="认识数据"></a>认识数据</h2><ul><li>属性类型<ol><li>标称属性</li><li>二元属性：对称和非对称</li><li>序数属性</li><li>数值属性：区间标度属性、比率标度属性</li><li>离散属性与连续属性</li></ol></li><li>数据的基本统计描述<ol><li>中心趋势度量：均值、中位数、众数、中列数</li><li>度量数据散布：极差、四分位数和四分位数极差、方差、标准差</li><li>五数概括、盒图、离群点</li></ol></li><li>数据的基本统计描述的图片图形显示<ol><li>分位数图</li><li>分位数-分位数图</li><li>直方图</li><li>散点图</li></ol></li><li>相异性<ol><li>标称属性：不匹配率来计算相异性</li><li>二元属性：非对称去掉（0,0）情况，非对称的二元相似性称作Jaccard系数    </li><li>数值属性：欧几里得距离L2，曼哈顿距离L1.Lmax选最大差值（上确界距离）</li><li>序数属性：<br> <img src="https://i.imgur.com/LoJGct4.jpg" alt="计算步骤"></li><li>混合属性<br> <img src="https://i.imgur.com/C1L79T0.jpg" alt="计算步骤"></li></ol></li><li>两个词频向量的余弦相似性<br>  <img src="https://i.imgur.com/pWGMpuy.jpg" alt="Tanimoto系数"></li></ul><hr><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><ol><li>数据清理<ol><li>缺失值<ul><li>忽略元组</li><li>人工填写缺失值</li><li>使用一个全局变量填充缺失值</li><li>使用属性的中心度量（均值或中位数）填充缺失值</li><li>使用与给定元组属同一类的所有样本的属性均值或中位数</li><li>使用最可能的值填充缺失值</li></ul></li><li>噪声数据<ul><li>分箱：用箱均值光滑、用箱中位数光滑、用箱边界光滑</li><li>回归</li><li>离群点分析</li></ul></li></ol></li><li>数据集成<ol><li>实体识别问题</li><li>冗余和相关分析<ul><li>标称数据的卡方检验<br><img src="https://i.imgur.com/XJSlqCf.png" alt="计算公式"></li><li>数值数据的相关系数</li><li>数值数据的协方差<br><img src="https://i.imgur.com/wAJ7qyC.png" alt="协方差"></li></ul></li><li>元组重复</li><li>数据值冲突    的检测与处理</li></ol></li><li>数据归约<ol><li>维规约<ul><li>小波变换</li><li>PCA</li><li>属性子集选择</li></ul></li><li>数量规约<ul><li>回归和对数线性模型：参数化数据规约</li><li>直方图</li><li>聚类</li><li>抽样<ul><li>无放回简单随机抽样</li><li>有放回简单随机抽样</li><li>簇抽样</li><li>分层抽样</li></ul></li><li>数据立方体聚集</li></ul></li><li>数据压缩</li></ol></li><li>数据变换<ol><li>光滑</li><li>属性构造</li><li>聚集</li><li>规范化<ul><li>最大-最小规范化</li><li>z分数规范化</li><li>小数定标规范化</li></ul></li><li>离散化<ul><li>分箱</li><li>直方图</li><li>聚类、决策树和相关分析</li></ul></li><li>有标称数据产生概念分层</li></ol></li></ol><hr><h2 id="数据仓库与联机分析处理"><a href="#数据仓库与联机分析处理" class="headerlink" title="数据仓库与联机分析处理"></a>数据仓库与联机分析处理</h2><ol><li><p>基本概念</p><ul><li>什么是数据仓库<br>  <strong>数据仓库是一个面向主题的、集成的、时变的、非易失的数据集合，支持管理者的决策过程</strong></li><li>联机事务处理OLTP和联机分析处理OLAP的区别<br>  <img src="https://i.imgur.com/1WWObi6.jpg" alt="区别"></li></ul></li><li><p>数据立方体与OLAP</p><ul><li><p>多维数据模型的模式</p><ol><li>星形模式</li><li>雪花模式</li><li>事务星座模式</li></ol></li><li><p>OLAP操作</p><ol><li>上卷</li><li>下钻</li><li>切片和切块</li><li>转轴</li></ol><p><img src="https://i.imgur.com/Mu9gloy.jpg" alt="OLAP操作"></p></li></ul></li><li><p>数据仓库的实现</p><ul><li>数据立方体是方体的格</li><li>方体的物化<ol><li>不物化</li><li>完全物化</li><li>部分物化：冰山立方体</li></ol></li><li>位图索引、连接索引和位图连接索引</li><li>数据泛化：面向属性的归纳<ol><li>属性删除</li><li>属性泛化</li></ol></li></ul></li></ol><hr><h2 id="数据立方体技术"><a href="#数据立方体技术" class="headerlink" title="数据立方体技术"></a>数据立方体技术</h2><ol><li>基本概念</li><li>数据立方体计算方法<ul><li>多路数组聚集：自底向上</li><li>BUC：从顶点方体向下计算冰山立方体</li><li>Star-Cubing:使用动态星树结构计算冰山立方体</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> data mining </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data mining </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2019/12/17/javascript/"/>
      <url>/2019/12/17/javascript/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript："><a href="#JavaScript：" class="headerlink" title="JavaScript："></a>JavaScript：</h2><ul><li><p>概念：一门客户端脚本语言</p><ul><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎</li><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了</li></ul></li><li><p>功能：</p><ul><li>可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</li></ul></li><li><p>JavaScript发展史：</p><ol><li>1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C–    ，后来更名为：ScriptEase</li><li>1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript</li><li>1996年，微软抄袭JavaScript开发出JScript语言</li><li>1997年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。</li></ol><ul><li>JavaScript = ECMAScript + JavaScript自己特有的东西(BOM+DOM)</li></ul></li><li><p>ECMAScript：客户端脚本语言的标准</p><ol><li><p>基本语法：</p><ol><li><p>与html结合方式</p><ol><li>内部JS：<ul><li>定义<code>&lt;script&gt;</code>，标签体内容就是js代码</li></ul></li><li>外部JS：<ul><li>定义<code>&lt;script&gt;</code>，通过src属性引入外部的js文件</li></ul></li></ol><ul><li>注意：<ol><li><code>&lt;script&gt;</code>可以定义在html页面的任何地方但是定义的位置会影响执行顺序</li><li><code>&lt;script&gt;</code>可以定义多个</li></ol></li></ul></li><li><p>注释</p><ol><li>单行注释：//注释内容</li><li>多行注释：/<em>注释内容</em>/</li></ol></li><li><p>数据类型：</p><ol><li><p>原始数据类型(基本数据类型)：</p><ol><li>number：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)</li><li>string：字符串。 字符串  “abc” “a” ‘abc’</li><li>boolean: true和false</li><li>null：一个对象为空的占位符</li><li>undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</li></ol></li><li><p>引用数据类型：对象</p></li></ol></li><li><p>变量</p><ul><li><p>变量：一小块存储数据的内存空间</p></li><li><p>Java语言是强类型语言，而JavaScript是弱类型语言。</p><ul><li>强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</li><li>弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</li></ul></li><li><p>语法：</p><ul><li>var 变量名 = 初始化值;</li></ul></li><li><p>typeof运算符：获取变量的类型。</p><ul><li>注：null运算后得到的是object</li></ul></li></ul></li><li><p>运算符</p><ol><li><p>一元运算符：只有一个运算数的运算符<br> ++，– ， +(正号)  </p><ul><li>++ –: 自增(自减)<ul><li>++(–) 在前，先自增(自减)，再运算</li><li>++(–) 在后，先运算，再自增(自减)</li></ul></li><li>+(-)：正负号</li><li>注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换<ul><li>其他类型转number：<ul><li>string转number：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）</li><li>boolean转number：true转为1，false转为0</li></ul></li></ul></li></ul></li><li><p>算数运算符</p><ul><li><ul><li><ul><li>/ % …</li></ul></li></ul></li></ul></li><li><p>赋值运算符<br> = += -+….</p></li><li><p>比较运算符</p><blockquote><p>&lt; &gt;= &lt;= == ===(全等于)</p><ul><li>比较方式</li></ul><ol><li>类型相同：直接比较<ul><li>字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。</li></ul></li><li>类型不同：先进行类型转换，再比较<ul><li>===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</li></ul></li></ol></blockquote></li><li><p>逻辑运算符<br> &amp;&amp; || !</p><ul><li>其他类型转boolean：</li></ul><ol><li>number：0或NaN为假，其他为真</li><li>string：除了空字符串(“”)，其他都是true</li><li>null&amp;undefined:都是false</li><li>对象：所有对象都为true</li></ol></li><li><p>三元运算符<br> ? : 表达式<br> var a = 3;<br> var b = 4;</p><p> var c = a &gt; b ? 1:0;</p><ul><li>语法：<ul><li>表达式? 值1:值2;</li><li>判断表达式的值，如果是true则取值1，如果是false则取值2；</li></ul></li></ul></li></ol></li><li><p>流程控制语句：</p><ol><li>if…else…</li><li>switch:<ul><li>在java中，switch语句可以接受的数据类型： byte int shor char,枚举(1.5) ,String(1.7)<ul><li>switch(变量):<br>  case 值:</li></ul></li><li>在JS中,switch语句可以接受任意的原始数据类型</li></ul></li><li>while</li><li>do…while</li><li>for</li></ol></li><li><p>JS特殊语法：</p><ol><li>语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</li><li>变量的定义使用var关键字，也可以不使用<ul><li>用： 定义的变量是局部变量</li><li>不用：定义的变量是全局变量(不建议)</li></ul></li></ol></li><li><p>练习：99乘法表</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>99乘法表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">     <span class="token selector">td</span><span class="token punctuation">{</span>         <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid<span class="token punctuation">;</span>     <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;table  align='center'>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//1.完成基本的for循环嵌套，展示乘法表</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;tr>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;td>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//输出  1 * 1 = 1</span>             document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" * "</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"&amp;nbsp;&amp;nbsp;&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/td>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">/*//输出换行         document.write("&lt;br>");*/</span>         document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/tr>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//2.完成表格嵌套</span>     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/table>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li></ul><ol start="2"><li><p>基本对象：</p><ol><li><p>Function：函数(方法)对象</p><ol><li><p>创建：</p><ol><li><p>var fun = new Function(形式参数列表,方法体);  //忘掉吧</p></li><li><p> function 方法名称(形式参数列表){</p><pre><code> 方法体</code></pre><p> }</p></li><li><p>var 方法名 = function(形式参数列表){</p><pre><code> 方法体</code></pre><p>}</p></li></ol></li><li><p>方法：</p></li><li><p>属性：<br> length:代表形参的个数</p></li><li><p>特点：</p><ol><li>方法定义是，形参的类型不用写,返回值类型也不写。</li><li>方法是一个对象，如果定义名称相同的方法，会覆盖</li><li>在JS中，方法的调用只与方法的名称有关，和参数列表无关</li><li>在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数</li></ol></li><li><p>调用：<br> 方法名称(实际参数列表);</p></li></ol></li><li><p>Array:数组对象</p><ol><li>创建：<ol><li>var arr = new Array(元素列表);</li><li>var arr = new Array(默认长度);</li><li>var arr = [元素列表];</li></ol></li><li>方法<br> join(参数):将数组中的元素按照指定的分隔符拼接为字符串<br> push()    向数组的末尾添加一个或更多元素，并返回新的长度。</li><li>属性<br> length:数组的长度</li><li>特点：<ol><li>JS中，数组元素的类型可变的。</li><li>JS中，数组长度可变的。</li></ol></li></ol></li><li><p>Boolean</p></li><li><p>Date：日期对象</p><ol><li><p>创建：<br> var date = new Date();</p></li><li><p>方法：<br> toLocaleString()：返回当前date对象对应的时间本地字符串格式<br> getTime():获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差</p></li></ol></li><li><p>Math：数学对象</p><ol><li><p>创建：</p><ul><li>特点：Math对象不用创建，直接使用。  Math.方法名();</li></ul></li><li><p>方法：<br> random():返回 0 ~ 1 之间的随机数。 含0不含1<br> ceil(x)：对数进行上舍入。<br> floor(x)：对数进行下舍入。<br> round(x)：把数四舍五入为最接近的整数。</p></li><li><p>属性：<br> PI</p></li></ol></li><li><p>Number</p></li><li><p>String</p></li><li><p>RegExp：正则表达式对象</p><ol><li>正则表达式：定义字符串的组成规则。<ol><li>单个字符:[]<br> 如： [a] [ab] [a-zA-Z0-9_]<ul><li>特殊符号代表特殊含义的单个字符:<br>  \d:单个数字字符 [0-9]<br>  \w:单个单词字符[a-zA-Z0-9_]</li></ul></li><li>量词符号：<br> ?：表示出现0次或1次<br> *：表示出现0次或多次<br> +：出现1次或多次<br> {m,n}:表示 m&lt;= 数量 &lt;= n<ul><li>m如果缺省： {,n}:最多n次</li><li>n如果缺省：{m,} 最少m次</li></ul></li><li>开始结束符号<ul><li>^:开始</li><li>$:结束</li></ul></li></ol></li><li>正则对象：<ol><li>创建<ol><li>var reg = new RegExp(“正则表达式”);</li><li>var reg = /正则表达式/;</li></ol></li><li>方法    <ol><li>test(参数):验证指定的字符串是否符合正则定义的规范    </li></ol></li></ol></li></ol></li><li><p>Global</p><ol><li><p>特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  方法名();</p></li><li><p>方法：<br> encodeURI():url编码<br> decodeURI():url解码</p><p> encodeURIComponent():url编码,编码的字符更多<br> decodeURIComponent():url解码</p><p> parseInt():将字符串转为数字</p><ul><li><p>逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number<br>isNaN():判断一个值是否是NaN</p></li><li><p>NaN六亲不认，连自己都不认。NaN参与的==比较全部问false</p><p>eval():讲 JavaScript 字符串，并把它作为脚本代码来执行。</p></li></ul></li><li><p>URL编码<br>传智播客 =  %E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2</p></li></ol></li></ol></li></ol><h2 id="DOM简单学习：为了满足案例要求"><a href="#DOM简单学习：为了满足案例要求" class="headerlink" title="DOM简单学习：为了满足案例要求"></a>DOM简单学习：为了满足案例要求</h2><ul><li><p>功能：控制html文档的内容</p></li><li><p>获取页面标签(元素)对象：Element</p><ul><li>document.getElementById(“id值”):通过元素的id获取元素对象</li></ul></li><li><p>操作Element对象：</p><ol><li>修改属性值：<ol><li>明确获取的对象是哪一个？</li><li>查看API文档，找其中有哪些属性可以设置</li></ol></li><li>修改标签体内容：<ul><li>属性：innerHTML</li></ul><ol><li>获取元素对象</li><li>使用innerHTML属性修改标签体内容</li></ol></li></ol></li></ul><h2 id="事件简单学习"><a href="#事件简单学习" class="headerlink" title="事件简单学习"></a>事件简单学习</h2><ul><li><p>功能： 某些组件被执行了某些操作后，触发某些代码的执行。</p><ul><li>造句：  xxx被xxx,我就xxx<ul><li>我方水晶被摧毁后，我就责备对友。</li><li>敌方水晶被摧毁后，我就夸奖自己。</li></ul></li></ul></li><li><p>如何绑定事件</p><ol><li><p>直接在html标签上，指定事件的属性(操作)，属性值就是js代码</p><ol><li>事件：onclick— 单击事件</li></ol></li><li><p>通过js获取元素对象，指定事件属性，设置一个函数</p></li></ol><ul><li><p>代码：</p><pre class="line-numbers language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>light<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/off.gif<span class="token punctuation">"</span></span>  <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>light2<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/off.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">          <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我被点了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我又被点了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'咋老点我？'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//1.获取light2对象</span>          <span class="token keyword">var</span> light2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"light2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//2.绑定事件</span>          light2<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fun2<span class="token punctuation">;</span>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>案例1：电灯开关</p><pre class="line-numbers language-html"><code class="language-html">  <span class="token doctype">&lt;!DOCTYPE html></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>电灯开关<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>light<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/off.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token comment" spellcheck="true">/*          分析：              1.获取图片对象              2.绑定单击事件              3.每次点击切换图片                  * 规则：                      * 如果灯是开的 on,切换图片为 off                      * 如果灯是关的 off,切换图片为 on                  * 使用标记flag来完成          */</span>      <span class="token comment" spellcheck="true">//1.获取图片对象</span>      <span class="token keyword">var</span> light <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代表灯是灭的。 off图片</span>      <span class="token comment" spellcheck="true">//2.绑定单击事件</span>      light<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断如果灯是开的，则灭掉</span>              light<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"img/off.gif"</span><span class="token punctuation">;</span>              flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//如果灯是灭的，则打开</span>              light<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"img/on.gif"</span><span class="token punctuation">;</span>              flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM:"></a>BOM:</h1><ol><li><p>概念：Browser Object Model 浏览器对象模型</p><ul><li>将浏览器的各个组成部分封装成对象。</li></ul></li><li><p>组成：</p><ul><li>Window：窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：显示器屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul></li><li><p>Window：窗口对象</p><ol><li><p>创建</p></li><li><p>方法</p><ol><li><p>与弹出框有关的方法：<br>alert()    显示带有一段消息和一个确认按钮的警告框。<br>confirm()    显示带有一段消息以及确认按钮和取消按钮的对话框。</p><ul><li>如果用户点击确定按钮，则方法返回true</li><li>如果用户点击取消按钮，则方法返回false<br>prompt()    显示可提示用户输入的对话框。</li><li>返回值：获取用户输入的值</li></ul></li><li><p>与打开关闭有关的方法：<br>close()    关闭浏览器窗口。</p><ul><li>谁调用我 ，我关谁<br>open()    打开一个新的浏览器窗口</li><li>返回新的Window对象</li></ul></li><li><p>与定时器有关的方式<br>setTimeout()    在指定的毫秒数后调用函数或计算表达式。</p><ul><li>参数：<ol><li>js代码或者方法对象</li><li>毫秒值</li></ol></li><li>返回值：唯一标识，用于取消定时器<br>clearTimeout()    取消由 setTimeout() 方法设置的 timeout。</li></ul><p>setInterval()    按照指定的周期（以毫秒计）来调用函数或计算表达式。<br>clearInterval()    取消由 setInterval() 设置的 timeout。</p></li></ol></li><li><p>属性：</p><ol><li>获取其他BOM对象：<br> history<br> location<br> Navigator<br> Screen:</li><li>获取DOM对象<br> document</li></ol></li><li><p>特点</p><ul><li>Window对象不需要创建可以直接使用 window使用。 window.方法名();</li><li>window引用可以省略。  方法名();</li></ul></li></ol></li><li><p>Location：地址栏对象</p><ol><li><p>创建(获取)：</p><ol><li>window.location</li><li>location</li></ol></li><li><p>方法：</p><ul><li>reload()    重新加载当前文档。刷新</li></ul></li><li><p>属性</p><ul><li>href    设置或返回完整的 URL。</li></ul></li></ol></li><li><p>History：历史记录对象</p><ol><li><p>创建(获取)：</p><ol><li>window.history</li><li>history</li></ol></li><li><p>方法：</p><ul><li>back()    加载 history 列表中的前一个 URL。</li><li>forward()    加载 history 列表中的下一个 URL。</li><li>go(参数)    加载 history 列表中的某个具体页面。<ul><li>参数：<ul><li>正数：前进几个历史记录</li><li>负数：后退几个历史记录</li></ul></li></ul></li></ul></li><li><p>属性：</p><ul><li>length    返回当前窗口历史列表中的 URL 数量。</li></ul></li></ol></li></ol><hr><h2 id="DOM："><a href="#DOM：" class="headerlink" title="DOM："></a>DOM：</h2><ul><li><p>概念： Document Object Model 文档对象模型</p><ul><li>将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</li></ul></li><li><p>W3C DOM 标准被分为 3 个不同的部分：</p><ul><li><p>核心 DOM - 针对任何结构化文档的标准模型</p><ul><li><p>Document：文档对象</p></li><li><p>Element：元素对象</p></li><li><p>Attribute：属性对象</p></li><li><p>Text：文本对象</p></li><li><p>Comment:注释对象</p></li><li><p>Node：节点对象，其他5个的父对象</p></li></ul></li><li><p>XML DOM - 针对 XML 文档的标准模型</p></li><li><p>HTML DOM - 针对 HTML 文档的标准模型</p></li></ul></li><li><p>核心DOM模型：</p><ul><li>Document：文档对象<ol><li>创建(获取)：在html dom模型中可以使用window对象来获取<ol><li>window.document</li><li>document</li></ol></li><li>方法：<ol><li>获取Element对象：<ol><li>getElementById()    ： 根据id属性值获取元素对象。id属性值一般唯一</li><li>getElementsByTagName()：根据元素名称获取元素对象们。返回值是一个数组</li><li>getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组</li><li>getElementsByName(): 根据name属性值获取元素对象们。返回值是一个数组</li></ol></li><li>创建其他DOM对象：<br> createAttribute(name)<br> createComment()<br> createElement()<br> createTextNode()</li></ol></li><li>属性</li></ol></li><li>Element：元素对象<ol><li>获取/创建：通过document来获取和创建</li><li>方法：<ol><li>removeAttribute()：删除属性</li><li>setAttribute()：设置属性</li></ol></li></ol></li><li>Node：节点对象，其他5个的父对象<ul><li>特点：所有dom对象都可以被认为是一个节点</li><li>方法：<ul><li>CRUD dom树：<ul><li>appendChild()：向节点的子节点列表的结尾添加新的子节点。</li><li>removeChild()    ：删除（并返回）当前节点的指定子节点。</li><li>replaceChild()：用新节点替换一个子节点。</li></ul></li></ul></li><li>属性：<ul><li>parentNode 返回节点的父节点。</li></ul></li></ul></li></ul></li><li><p>HTML DOM</p><ol><li>标签体的设置和获取：innerHTML</li><li>使用html元素对象的属性</li><li>控制元素样式<ol><li>使用元素的style属性来设置<br> 如：<pre><code>     //修改样式方式1 div1.style.border = &quot;1px solid red&quot;; div1.style.width = &quot;200px&quot;; //font-size--&gt; fontSize div1.style.fontSize = &quot;20px&quot;;</code></pre></li><li>提前定义好类选择器的样式，通过元素的className属性来设置其class属性值。</li></ol></li></ol></li></ul><hr><h2 id="事件监听机制："><a href="#事件监听机制：" class="headerlink" title="事件监听机制："></a>事件监听机制：</h2><ul><li><p>概念：某些组件被执行了某些操作后，触发某些代码的执行。    </p><ul><li>事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了</li><li>事件源：组件。如： 按钮 文本输入框…</li><li>监听器：代码。</li><li>注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</li></ul></li><li><p>常见的事件：</p><ol><li><p>点击事件：</p><ol><li>onclick：单击事件</li><li>ondblclick：双击事件</li></ol></li><li><p>焦点事件</p><ol><li>onblur：失去焦点</li><li>onfocus:元素获得焦点。</li></ol></li><li><p>加载事件：</p><ol><li>onload：一张页面或一幅图像完成加载。</li></ol></li><li><p>鼠标事件：</p><ol><li>onmousedown    鼠标按钮被按下。</li><li>onmouseup    鼠标按键被松开。</li><li>onmousemove    鼠标被移动。</li><li>onmouseover    鼠标移到某元素之上。</li><li>onmouseout    鼠标从某元素移开。</li></ol></li><li><p>键盘事件：</p><ol><li>onkeydown    某个键盘按键被按下。    </li><li>onkeyup        某个键盘按键被松开。</li><li>onkeypress    某个键盘按键被按下并松开。</li></ol></li><li><p>选择和改变</p><ol><li>onchange    域的内容被改变。</li><li>onselect    文本被选中。</li></ol></li><li><p>表单事件：</p><ol><li>onsubmit    确认按钮被点击。</li><li>onreset    重置按钮被点击。</li></ol></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2019/12/16/jdbc/"/>
      <url>/2019/12/16/jdbc/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h2><ol><li><p>概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库</p><ul><li>JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul></li><li><p>快速入门：</p><ul><li><p>步骤：</p><ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar<br> 1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下<br> 2.右键–&gt;Add As Library</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol></li><li><p>代码实现：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1. 导入驱动jar包</span>  <span class="token comment" spellcheck="true">//2.注册驱动</span>  Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//3.获取数据库连接对象</span>  Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db3"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//4.定义sql语句</span>  String sql <span class="token operator">=</span> <span class="token string">"update account set balance = 500 where id = 1"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//5.获取执行sql的对象 Statement</span>  Statement stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//6.执行sql</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//7.处理结果</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//8.释放资源</span>  stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>详解各个对象：</p><ol><li><p>DriverManager：驱动管理对象</p><ul><li><p>功能：</p><ol><li><p>注册驱动：告诉程序该使用哪一个数据库驱动jar<br> static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。<br> 写代码使用：  Class.forName(“com.mysql.jdbc.Driver”);<br> 通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">static</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> E<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> 注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取数据库连接：</p><ul><li>方法：static Connection getConnection(String url, String user, String password) </li><li>参数：<ul><li>url：指定连接的路径<ul><li>语法：jdbc:mysql://ip地址(域名):端口号/数据库名称</li><li>例子：jdbc:mysql://localhost:3306/db3</li><li>细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称</li></ul></li><li>user：用户名</li><li>password：密码 </li></ul></li></ul></li></ol></li></ul></li><li><p>Connection：数据库连接对象</p><ol><li>功能：<ol><li>获取执行sql 的对象<ul><li>Statement createStatement()</li><li>PreparedStatement prepareStatement(String sql)  </li></ul></li><li>管理事务：<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</li><li>提交事务：commit() </li><li>回滚事务：rollback() </li></ul></li></ol></li></ol></li><li><p>Statement：执行sql的对象</p><ol><li><p>执行sql</p><ol><li>boolean execute(String sql) ：可以执行任意的sql 了解 </li><li>int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句<ul><li>返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</li></ul></li><li>ResultSet executeQuery(String sql)  ：执行DQL（select)语句</li></ol></li><li><p>练习：</p><ol><li><p>account表 添加一条记录</p></li><li><p>account表 修改记录</p></li><li><p>account表 删除一条记录</p><p>代码：</p><pre class="line-numbers language-java"><code class="language-java">Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//1. 注册驱动</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2. 定义sql</span> String sql <span class="token operator">=</span> <span class="token string">"insert into account values(null,'王五',3000)"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3.获取Connection对象</span> conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///db3"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//4.获取执行sql的对象 Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5.执行sql</span> <span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//影响的行数</span> <span class="token comment" spellcheck="true">//6.处理结果</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//stmt.close();</span> <span class="token comment" spellcheck="true">//7. 释放资源</span> <span class="token comment" spellcheck="true">//避免空指针异常</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li><li><p>ResultSet：结果集对象,封装查询结果</p><ul><li><p>boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</p></li><li><p>getXxx(参数):获取数据</p><ul><li>Xxx：代表数据类型   如： int getInt() ,    String getString()</li><li>参数：<ol><li>int：代表列的编号,从1开始   如： getString(1)</li><li>String：代表列名称。 如： getDouble(“balance”)</li></ol></li></ul></li><li><p>注意：</p><ul><li><p>使用步骤：</p><ol><li><p>游标向下移动一行</p></li><li><p>判断是否有数据</p></li><li><p>获取数据</p><p>//循环判断游标是否是最后一行末尾。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//获取数据</span> <span class="token comment" spellcheck="true">//6.2 获取数据</span> <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">double</span> balance <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul></li><li><p>练习：</p><ul><li>定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。<ol><li>定义Emp类</li><li>定义方法 public List<emp> findAll(){}</emp></li><li>实现方法 select * from emp;</li></ol></li></ul></li></ul></li><li><p>PreparedStatement：执行sql的对象</p><ol><li><p>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</p><ol><li>输入用户随便，输入密码：a’ or ‘a’ = ‘a</li><li>sql：select * from user where username = ‘fhdsjkf’ and password = ‘a’ or ‘a’ = ‘a’ </li></ol></li><li><p>解决sql注入问题：使用PreparedStatement对象来解决</p></li><li><p>预编译的SQL：参数使用?作为占位符</p></li><li><p>步骤：</p><ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql<ul><li>注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;</li></ul></li><li>获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql) </li><li>给？赋值：<ul><li>方法： setXxx(参数1,参数2)<ul><li>参数1：？的位置编号 从1 开始</li><li>参数2：？的值</li></ul></li></ul></li><li>执行sql，接受返回结果，不需要传递sql语句</li><li>处理结果</li><li>释放资源</li></ol></li><li><p>注意：后期都会使用PreparedStatement来完成增删改查的所有操作</p><ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ol></li></ol></li></ol><h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><ul><li><p>目的：简化书写</p></li><li><p>分析：</p><ol><li><p>注册驱动也抽取</p></li><li><p>抽取一个方法获取连接对象</p><ul><li>需求：不想传递参数（麻烦），还得保证工具类的通用性。</li><li>解决：配置文件<br>  jdbc.properties<pre><code>  url=  user=  password=</code></pre></li></ul></li><li><p>抽取一个方法释放资源</p></li></ol></li><li><p>代码实现：</p></li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String user<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String driver<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块     */</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取资源文件，获取值。</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1. 创建Properties集合类。</span>            Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取src路径下的文件的方式--->ClassLoader 类加载器</span>            ClassLoader classLoader <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            URL res  <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties</span>            <span class="token comment" spellcheck="true">//2. 加载文件</span>           <span class="token comment" spellcheck="true">// pro.load(new FileReader("D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties"));</span>            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3. 获取数据，赋值</span>            url <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            password <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driver <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4. 注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取连接     * @return 连接对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 释放资源     * @param stmt     * @param conn     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Statement stmt<span class="token punctuation">,</span>Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 释放资源     * @param stmt     * @param conn     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span>Statement stmt<span class="token punctuation">,</span> Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> rs <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>练习：</p><ul><li><p>需求：</p><ol><li>通过键盘录入用户名和密码</li><li>判断用户是否登录成功<ul><li>select * from user where username = “” and password = “”;</li><li>如果这个sql有查询结果，则成功，反之，则失败</li></ul></li></ol></li><li><p>步骤：</p><ol><li><p>创建数据库表 user</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>     id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>     username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     PASSWORD <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'234'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>代码实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo9</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//1.键盘录入，接受用户名和密码</span>     Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     String username <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     String password <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//2.调用方法</span>     <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDBCDemo9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//3.判断结果，输出不同语句</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//登录成功</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**     * 登录方法     */</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>String username <span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>username <span class="token operator">==</span> null <span class="token operator">||</span> password <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//连接数据库判断是否登录成功</span>     Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>     Statement stmt <span class="token operator">=</span>  null<span class="token punctuation">;</span>     ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//1.获取连接</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         conn <span class="token operator">=</span>  JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//2.定义sql</span>         String sql <span class="token operator">=</span> <span class="token string">"select * from user where username = '"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">"' and password = '"</span><span class="token operator">+</span>password<span class="token operator">+</span><span class="token string">"' "</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//3.获取执行sql的对象</span>         stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//4.执行查询</span>         rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//5.判断</span>         <span class="token comment" spellcheck="true">/* if(rs.next()){//如果有下一行，则返回true             return true;         }else{             return false;         }*/</span>         <span class="token keyword">return</span> rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果有下一行，则返回true</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>         JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span>stmt<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul></li></ul><h2 id="JDBC控制事务："><a href="#JDBC控制事务：" class="headerlink" title="JDBC控制事务："></a>JDBC控制事务：</h2><ol><li><p>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</p></li><li><p>操作：</p><ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></li><li><p>使用Connection对象来管理事务</p><ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务：commit() <ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：rollback() <ul><li>在catch中回滚事务</li></ul></li></ul></li><li><p>代码：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo10</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>         PreparedStatement pstmt1 <span class="token operator">=</span> null<span class="token punctuation">;</span>         PreparedStatement pstmt2 <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//1.获取连接</span>             conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//开启事务</span>             conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//2.定义sql</span>             <span class="token comment" spellcheck="true">//2.1 张三 - 500</span>             String sql1 <span class="token operator">=</span> <span class="token string">"update account set balance = balance - ? where id = ?"</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//2.2 李四 + 500</span>             String sql2 <span class="token operator">=</span> <span class="token string">"update account set balance = balance + ? where id = ?"</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//3.获取执行sql对象</span>             pstmt1 <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>             pstmt2 <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//4. 设置参数</span>             pstmt1<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             pstmt1<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             pstmt2<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             pstmt2<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//5.执行sql</span>             pstmt1<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 手动制造异常</span>             <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>             pstmt2<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//提交事务</span>             conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//事务回滚</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>             JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>pstmt1<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>             JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>pstmt2<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ol><li><p>概念：其实就是一个容器(集合)，存放数据库连接的容器。<br> 当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p></li><li><p>好处：</p><ol><li>节约资源</li><li>用户访问高效</li></ol></li><li><p>实现：</p><ol><li><p>标准接口：DataSource   javax.sql包下的</p><ol><li>方法：<ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li></ul></li></ol></li><li><p>一般我们不去实现它，有数据库厂商来实现</p><ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li></ol></li></ol></li><li><p>C3P0：数据库连接池技术</p><ul><li><p>步骤：</p><ol><li><p>导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，</p><ul><li>不要忘记导入数据库驱动jar包</li></ul></li><li><p>定义配置文件：</p><ul><li>名称： c3p0.properties 或者 c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可。</li></ul></li><li><p>创建核心对象 数据库连接池对象 ComboPooledDataSource</p></li><li><p>获取连接： getConnection</p></li></ol></li><li><p>代码：<br>   //1.创建数据库连接池对象<br>  DataSource ds  = new ComboPooledDataSource();<br>  //2. 获取连接对象<br>  Connection conn = ds.getConnection();</p></li></ul></li><li><p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p><ol><li>步骤：<ol><li>导入jar包 druid-1.0.9.jar</li><li>定义配置文件：<ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul></li><li>加载配置文件。Properties</li><li>获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol></li></ol><ul><li>代码：<br>   //3.加载配置文件<br>  Properties pro = new Properties();<br>  InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(“druid.properties”);<br>  pro.load(is);<br>  //4.获取连接池对象<br>  DataSource ds = DruidDataSourceFactory.createDataSource(pro);<br>  //5.获取连接<br>  Connection conn = ds.getConnection();</li></ul><ol start="2"><li>定义工具类<ol><li>定义一个类 JDBCUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol></li></ol><ul><li><p>代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//1.定义成员变量 DataSource</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> DataSource ds <span class="token punctuation">;</span>  <span class="token keyword">static</span><span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//1.加载配置文件</span>          Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>JDBCUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//2.获取DataSource</span>          ds <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**      * 获取连接      */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>      <span class="token keyword">return</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**      * 释放资源      */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Statement stmt<span class="token punctuation">,</span>Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* if(stmt != null){          try {              stmt.close();          } catch (SQLException e) {              e.printStackTrace();          }      }      if(conn != null){          try {              conn.close();//归还连接          } catch (SQLException e) {              e.printStackTrace();          }      }*/</span>      <span class="token function">close</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>stmt<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>ResultSet rs <span class="token punctuation">,</span> Statement stmt<span class="token punctuation">,</span> Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//归还连接</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**      * 获取连接池方法      */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span>  ds<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ul><li><p>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p></li><li><p>步骤：</p><ol><li><p>导入jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p><ul><li>JdbcTemplate template = new JdbcTemplate(ds);</li></ul></li><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ul><li>update():执行DML语句。增、删、改语句</li><li>queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合<ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li>queryForList():查询结果将结果集封装为list集合<ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li>query():查询结果，将结果封装为JavaBean对象<ul><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li></ul></li><li>queryForObject：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ul></li><li><p>练习：</p><ul><li><p>需求：</p><ol><li>修改1号数据的 salary 为 10000</li><li>添加一条记录</li><li>删除刚才添加的记录</li><li>查询id为1的记录，将其封装为Map集合</li><li>查询所有记录，将其封装为List</li><li>查询所有记录，将其封装为Emp对象的List集合</li><li>查询总记录数</li></ol></li><li><p>代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Emp<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JDBCUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BeanPropertyRowMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JdbcTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RowMapper<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplateDemo2</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Junit单元测试，可以让方法独立执行</span>  <span class="token comment" spellcheck="true">//1. 获取JDBCTemplate对象</span>  <span class="token keyword">private</span> JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>JDBCUtils<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**      * 1. 修改1号数据的 salary 为 10000      */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//2. 定义sql</span>      String sql <span class="token operator">=</span> <span class="token string">"update emp set salary = 10000 where id = 1001"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//3. 执行sql</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**      * 2. 添加一条记录      */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      String sql <span class="token operator">=</span> <span class="token string">"insert into emp(id,ename,dept_id) values(?,?,?)"</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">1015</span><span class="token punctuation">,</span> <span class="token string">"郭靖"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**      * 3.删除刚才添加的记录      */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      String sql <span class="token operator">=</span> <span class="token string">"delete from emp where id = ?"</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">1015</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**      * 4.查询id为1001的记录，将其封装为Map集合      * 注意：这个方法查询的结果集长度只能是1      */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      String sql <span class="token operator">=</span> <span class="token string">"select * from emp where id = ? or id = ?"</span><span class="token punctuation">;</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//{id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**      * 5. 查询所有记录，将其封装为List      */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      String sql <span class="token operator">=</span> <span class="token string">"select * from emp"</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> stringObjectMap <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringObjectMap<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**      * 6. 查询所有记录，将其封装为Emp对象的List集合      */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      String sql <span class="token operator">=</span> <span class="token string">"select * from emp"</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token operator">&lt;</span>Emp<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> Emp <span class="token function">mapRow</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>              Emp emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              String ename <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"ename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> job_id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"job_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> mgr <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"mgr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              Date joindate <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token string">"joindate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">double</span> salary <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">double</span> bonus <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"bonus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> dept_id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"dept_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              emp<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>              emp<span class="token punctuation">.</span><span class="token function">setEname</span><span class="token punctuation">(</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span>              emp<span class="token punctuation">.</span><span class="token function">setJob_id</span><span class="token punctuation">(</span>job_id<span class="token punctuation">)</span><span class="token punctuation">;</span>              emp<span class="token punctuation">.</span><span class="token function">setMgr</span><span class="token punctuation">(</span>mgr<span class="token punctuation">)</span><span class="token punctuation">;</span>              emp<span class="token punctuation">.</span><span class="token function">setJoindate</span><span class="token punctuation">(</span>joindate<span class="token punctuation">)</span><span class="token punctuation">;</span>              emp<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>              emp<span class="token punctuation">.</span><span class="token function">setBonus</span><span class="token punctuation">(</span>bonus<span class="token punctuation">)</span><span class="token punctuation">;</span>              emp<span class="token punctuation">.</span><span class="token function">setDept_id</span><span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> emp<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Emp emp <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**      * 6. 查询所有记录，将其封装为Emp对象的List集合      */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      String sql <span class="token operator">=</span> <span class="token string">"select * from emp"</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>Emp<span class="token operator">></span><span class="token punctuation">(</span>Emp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Emp emp <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**      * 7. 查询总记录数      */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      String sql <span class="token operator">=</span> <span class="token string">"select count(id) from emp"</span><span class="token punctuation">;</span>      Long total <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2019/12/16/mysql/"/>
      <url>/2019/12/16/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h1><ol><li><p>数据库的英文单词： DataBase 简称 ： DB</p></li><li><p>什么数据库？</p><ul><li>用于存储和管理数据的仓库。</li></ul></li><li><p>数据库的特点：</p><ol><li>持久化存储数据的。其实数据库就是一个文件系统</li><li>方便存储和管理数据</li><li>使用了统一的方式操作数据库 – SQL</li></ol></li></ol><ol start="4"><li>常见的数据库软件<ul><li>参见《MySQL基础.pdf》</li></ul></li></ol><h1 id="MySQL数据库软件"><a href="#MySQL数据库软件" class="headerlink" title="MySQL数据库软件"></a>MySQL数据库软件</h1><ol><li><p>安装</p><ul><li>参见《MySQL基础.pdf》</li></ul></li><li><p>卸载</p><ol><li>去mysql的安装目录找到my.ini文件<ul><li>复制 <code>datadir=&quot;C:/ProgramData/MySQL/MySQL Server 5.5/Data/</code>“</li></ul></li><li>卸载MySQL</li><li>删除C:/ProgramData目录下的MySQL文件夹。</li></ol></li><li><p>配置</p><ul><li><p>MySQL服务启动</p><ol><li>手动。</li><li>cmd–&gt; services.msc 打开服务的窗口</li><li>使用管理员打开cmd<ul><li>net start mysql : 启动mysql的服务</li><li>net stop mysql:关闭mysql服务</li></ul></li></ol></li><li><p>MySQL登录</p><ol><li>mysql -uroot -p密码</li><li>mysql -hip -uroot -p连接目标的密码</li><li>mysql –host=ip –user=root –password=连接目标的密码</li></ol></li><li><p>MySQL退出</p><ol><li>exit</li><li>quit</li></ol></li><li><p>MySQL目录结构</p><ol><li>MySQL安装目录：basedir=”D:/develop/MySQL/“<ul><li>配置文件 my.ini</li></ul></li><li>MySQL数据目录：datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“<ul><li>几个概念<ul><li>数据库：文件夹</li><li>表：文件</li><li>数据：数据</li></ul></li></ul></li></ol></li></ul></li></ol><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>1.什么是SQL？<br>Structured Query Language：结构化查询语言<br>其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</p><p>2.SQL通用语法<br>    1. SQL 语句可以单行或多行书写，以分号结尾。<br>    2. 可使用空格和缩进来增强语句的可读性。<br>    3. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。<br>    4. 3 种注释<br>        <em> 单行注释: – 注释内容 或 # 注释内容(mysql 特有)         </em> 多行注释: /<em> 注释 </em>/</p><ol start="3"><li>SQL分类<br> 1) DDL(Data Definition Language)数据定义语言<pre><code> 用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</code></pre> 2) DML(Data Manipulation Language)数据操作语言<pre><code> 用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</code></pre> 3) DQL(Data Query Language)数据查询语言<pre><code> 用来查询数据库中表的记录(数据)。关键字：select, where 等</code></pre> 4) DCL(Data Control Language)数据控制语言(了解)<pre><code> 用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</code></pre></li></ol><h2 id="DDL-操作数据库、表"><a href="#DDL-操作数据库、表" class="headerlink" title="DDL:操作数据库、表"></a>DDL:操作数据库、表</h2><ol><li><p>操作数据库：CRUD</p><ol><li><p>C(Create):创建</p><ul><li><p>创建数据库：</p><ul><li>create database 数据库名称;</li></ul></li><li><p>创建数据库，判断不存在，再创建：</p><ul><li>create database if not exists 数据库名称;</li></ul></li><li><p>创建数据库，并指定字符集</p><ul><li>create database 数据库名称 character set 字符集名;</li></ul></li><li><p>练习： 创建db4数据库，判断是否存在，并制定字符集为gbk</p><ul><li>create database if not exists db4 character set gbk;</li></ul></li></ul></li><li><p>R(Retrieve)：查询</p><ul><li>查询所有数据库的名称:<ul><li>show databases;</li></ul></li><li>查询某个数据库的字符集:查询某个数据库的创建语句<ul><li>show create database 数据库名称;</li></ul></li></ul></li><li><p>U(Update):修改</p><ul><li>修改数据库的字符集<ul><li>alter database 数据库名称 character set 字符集名称;</li></ul></li></ul></li><li><p>D(Delete):删除</p><ul><li>删除数据库<ul><li>drop database 数据库名称;</li></ul></li><li>判断数据库存在，存在再删除<ul><li>drop database if exists 数据库名称;</li></ul></li></ul></li><li><p>使用数据库</p><ul><li>查询当前正在使用的数据库名称<ul><li>select database();</li></ul></li><li>使用数据库<ul><li>use 数据库名称;</li></ul></li></ul></li></ol></li></ol><ol start="2"><li><p>操作表</p><ol><li><p>C(Create):创建</p><ol><li><p>语法：<br> create table 表名(</p><pre><code> 列名1 数据类型1, 列名2 数据类型2, .... 列名n 数据类型n</code></pre><p> );</p><ul><li><p>注意：最后一列，不需要加逗号（,）</p></li><li><p>数据库类型：</p><ol><li><p>int：整数类型</p><ul><li>age int,</li></ul></li><li><p>double:小数类型</p><ul><li>score double(5,2)</li></ul></li><li><p>date:日期，只包含年月日，yyyy-MM-dd</p></li><li><p>datetime:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss</p></li><li><p>timestamp:时间错类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss    </p><ul><li>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</li></ul></li><li><p>varchar：字符串</p><ul><li>name varchar(20):姓名最大20个字符</li><li>zhangsan 8个字符  张三 2个字符</li></ul></li></ol></li><li><p>创建表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>  id <span class="token keyword">int</span><span class="token punctuation">,</span>  name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  age <span class="token keyword">int</span> <span class="token punctuation">,</span>  score <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  birthday <span class="token keyword">date</span><span class="token punctuation">,</span>  insert_time <span class="token keyword">timestamp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>复制表：</p><ul><li>create table 表名 like 被复制的表名;          </li></ul></li></ul></li></ol></li><li><p>R(Retrieve)：查询</p><ul><li>查询某个数据库中所有的表名称<ul><li>show tables;</li></ul></li><li>查询表结构<ul><li>desc 表名;</li></ul></li></ul></li><li><p>U(Update):修改</p><ol><li>修改表名<br> alter table 表名 rename to 新的表名;</li><li>修改表的字符集<br> alter table 表名 character set 字符集名称;</li><li>添加一列<br> alter table 表名 add 列名 数据类型;</li><li>修改列名称 类型<br> alter table 表名 change 列名 新列别 新数据类型;<br> alter table 表名 modify 列名 新数据类型;</li><li>删除列<br> alter table 表名 drop 列名;</li></ol></li><li><p>D(Delete):删除</p><ul><li>drop table 表名;</li><li>drop table  if exists 表名 ;</li></ul></li></ol></li></ol><ul><li>客户端图形化工具：SQLYog</li></ul><h2 id="DML：增删改表中数据"><a href="#DML：增删改表中数据" class="headerlink" title="DML：增删改表中数据"></a>DML：增删改表中数据</h2><ol><li><p>添加数据：</p><ul><li>语法：<ul><li>insert into 表名(列名1,列名2,…列名n) values(值1,值2,…值n);</li></ul></li><li>注意：<ol><li>列名和值要一一对应。</li><li>如果表名后，不定义列名，则默认给所有列添加值<br> insert into 表名 values(值1,值2,…值n);</li><li>除了数字类型，其他类型需要使用引号(单双都可以)引起来</li></ol></li></ul></li><li><p>删除数据：</p><ul><li>语法：<ul><li>delete from 表名 [where 条件]</li></ul></li><li>注意：<ol><li>如果不加条件，则删除表中所有记录。</li><li>如果要删除所有记录<ol><li>delete from 表名; – 不推荐使用。有多少条记录就会执行多少次删除操作</li><li>TRUNCATE TABLE 表名; – 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</li></ol></li></ol></li></ul></li><li><p>修改数据：</p><ul><li><p>语法：</p><ul><li>update 表名 set 列名1 = 值1, 列名2 = 值2,… [where 条件];</li></ul></li><li><p>注意：</p><ol><li>如果不加任何条件，则会将表中所有记录全部修改。</li></ol></li></ul></li></ol><h2 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h2><ul><li>select * from 表名;</li></ul><ol><li>语法：<pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">select</span>     字段列表 <span class="token keyword">from</span>     表名列表 <span class="token keyword">where</span>     条件列表 <span class="token keyword">group</span> <span class="token keyword">by</span>     分组字段 <span class="token keyword">having</span>     分组之后的条件 <span class="token keyword">order</span> <span class="token keyword">by</span>     排序 <span class="token keyword">limit</span>     分页限定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li>基础查询<ol><li>多个字段的查询<br> select 字段名1，字段名2… from 表名；<ul><li>注意：<ul><li>如果查询所有字段，则可以使用*来替代字段列表。</li></ul></li></ul></li><li>去除重复：<ul><li>distinct</li></ul></li><li>计算列<ul><li>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</li><li>ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null<ul><li>表达式1：哪个字段需要判断是否为null</li><li>如果该字段为null后的替换值。</li></ul></li></ul></li><li>起别名：<ul><li>as：as也可以省略</li></ul></li></ol></li></ol><ol start="3"><li><p>条件查询</p><ol><li><p>where子句后跟条件</p></li><li><p>运算符</p><ul><li><blockquote><p>、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;</p></blockquote></li><li>BETWEEN…AND  </li><li>IN( 集合) </li><li>LIKE：模糊查询<ul><li>占位符：<ul><li>_:单个任意字符</li><li>%：多个任意字符</li></ul></li></ul></li><li>IS NULL  </li><li>and  或 &amp;&amp;</li><li>or  或 || </li><li>not  或 !</li></ul><p> – 查询年龄大于20岁</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询年龄等于20岁</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询年龄不等于20岁</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">!=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">&lt;></span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询年龄大于等于20 小于等于30</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">>=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span>  age <span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">>=</span> <span class="token number">20</span> <span class="token operator">AND</span>  age <span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">AND</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询年龄22岁，18岁，25岁的信息</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">25</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询英语成绩为null</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> english <span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 不对的。null值不能使用 = （!=） 判断</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> english <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询英语成绩不为null</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> english  <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询姓马的有哪些？ like</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">'马%'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询姓名第二个字是化的人</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">"_化%"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询姓名是3个字的人</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">'___'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询姓名中包含德的人</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">'%德%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><hr><h1 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL:查询语句"></a>DQL:查询语句</h1><ol><li><p>排序查询</p><ul><li><p>语法：order by 子句</p></li><li><p>order by 排序字段1 排序方式1 ，  排序字段2 排序方式2…</p></li><li><p>排序方式：</p></li><li><p>ASC：升序，默认的。</p></li><li><p>DESC：降序。</p></li><li><p>注意：</p></li><li><p>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</p></li></ul></li></ol><ol start="2"><li>聚合函数：将一列数据作为一个整体，进行纵向的计算。<ol><li>count：计算个数</li><li>一般选择非空的列：主键</li><li>count(*)</li><li>max：计算最大值</li><li>min：计算最小值</li><li>sum：计算和</li><li>avg：计算平均值</li></ol></li></ol><ul><li>注意：聚合函数的计算，排除null值。<br>解决方案：<ol><li>选择不包含非空的列进行计算</li><li>IFNULL函数</li></ol></li></ul><ol start="3"><li><p>分组查询:</p><ol><li><p>语法：group by 分组字段；</p></li><li><p>注意：</p><ol><li><p>分组之后查询的字段：分组字段、聚合函数</p></li><li><p>where 和 having 的区别？</p><ol><li>where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</li><li>where 后不可以跟聚合函数，having可以进行聚合函数的判断。</li></ol><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token comment" spellcheck="true">-- 按照性别分组。分别查询男、女同学的平均分</span> <span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 按照性别分组。分别查询男、女同学的平均分,人数</span> <span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组</span> <span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">></span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人</span> <span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">></span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 人数 <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> math <span class="token operator">></span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> 人数 <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li><li><p>分页查询</p><ol><li>语法：limit 开始的索引,每页查询的条数;</li><li>公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数</li></ol><p> – 每页显示3条记录 </p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 第1页</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 第2页</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 第3页</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>limit 是一个MySQL”方言”</li></ol></li></ol><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li><p>概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。    </p></li><li><p>分类：</p><ol><li>主键约束：primary key</li><li>非空约束：not null</li><li>唯一约束：unique</li><li>外键约束：foreign key</li></ol></li><li><p>非空约束：not null，值不能为null</p><ol><li><p>创建表时添加约束</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>     id <span class="token keyword">INT</span><span class="token punctuation">,</span>     NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token comment" spellcheck="true">-- name为非空</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建表完后，添加非空约束<br> <code>ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</code></p></li><li><p>删除name的非空约束<br> <code>ALTER TABLE stu MODIFY NAME VARCHAR(20);</code></p></li></ol></li><li><p>唯一约束：unique，值不能重复</p><ol><li><p>创建表时，添加唯一约束</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>     id <span class="token keyword">INT</span><span class="token punctuation">,</span>     phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token comment" spellcheck="true">-- 添加了唯一约束</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意mysql中，唯一约束限定的列的值可以有多个null</li></ul></li><li><p>删除唯一约束<br> <code>ALTER TABLE stu DROP INDEX phone_number;</code></p></li><li><p>在创建表后，添加唯一约束<br> <code>ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</code></p></li></ol></li><li><p>主键约束：primary key。</p><ol><li><p>注意：</p><ol><li>含义：非空且唯一</li><li>一张表只能有一个字段为主键</li><li>主键就是表中记录的唯一标识</li></ol></li><li><p>在创建表时，添加主键约束</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>     id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 给id添加主键约束</span>     name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除主键</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token comment" spellcheck="true">-- 错误 alter table stu modify id int ;</span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建完表后，添加主键<br> <code>ALTER TABLE stu MODIFY id INT PRIMARY KEY;</code></p></li><li><p>自动增长：</p><ol><li><p>概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</p></li><li><p>在创建表时，添加主键约束，并且完成主键自增长<br> ``sql<br> create table stu(</p><pre><code> id int primary key auto_increment,-- 给id添加主键约束 name varchar(20)</code></pre><p> );</p><pre><code></code></pre></li><li><p>删除自动增长<br> <code>ALTER TABLE stu MODIFY id INT;</code></p></li><li><p>添加自动增长<br> <code>ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</code></p></li></ol></li></ol></li></ul><ul><li><p>外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。</p><ol><li><p>在创建表时，可以添加外键</p><ul><li>语法：<br>  create table 表名(<pre><code>  ....  外键列  constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</code></pre>  );</li></ul></li><li><p>删除外键<br> ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</p></li><li><p>创建表之后，添加外键<br> ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</p></li><li><p>级联操作</p><ol><li>添加级联操作<br> 语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称 <pre><code>     FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE  ;</code></pre></li><li>分类：<ol><li>级联更新：ON UPDATE CASCADE </li><li>级联删除：ON DELETE CASCADE </li></ol></li></ol></li></ol></li></ul><h2 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h2><ol><li><p>多表之间的关系</p><ol><li>分类：<ol><li>一对一(了解)：<ul><li>如：人和身份证</li><li>分析：一个人只有一个身份证，一个身份证只能对应一个人</li></ul></li><li>一对多(多对一)：<ul><li>如：部门和员工</li><li>分析：一个部门有多个员工，一个员工只能对应一个部门</li></ul></li><li>多对多：<ul><li>如：学生和课程</li><li>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</li></ul></li></ol></li><li>实现关系：<ol><li>一对多(多对一)：<ul><li>如：部门和员工</li><li>实现方式：在多的一方建立外键，指向一的一方的主键。</li></ul></li><li>多对多：<ul><li>如：学生和课程</li><li>实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</li></ul></li><li>一对一(了解)：<ul><li>如：人和身份证</li><li>实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</li></ul></li></ol></li></ol></li><li><p>案例</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token comment" spellcheck="true">-- 创建旅游线路分类表 tab_category</span> <span class="token comment" spellcheck="true">-- cid 旅游线路分类主键，自动增长</span> <span class="token comment" spellcheck="true">-- cname 旅游线路分类名称非空，唯一，字符串 100</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_category <span class="token punctuation">(</span>     cid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>     cname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 创建旅游线路表 tab_route</span> <span class="token comment" spellcheck="true">/* rid 旅游线路主键，自动增长 rname 旅游线路名称非空，唯一，字符串 100 price 价格 rdate 上架时间，日期类型 cid 外键，所属分类 */</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_route<span class="token punctuation">(</span>     rid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>     rname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>     price <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span>     rdate <span class="token keyword">DATE</span><span class="token punctuation">,</span>     cid <span class="token keyword">INT</span><span class="token punctuation">,</span>     <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_category<span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*创建用户表 tab_user uid 用户主键，自增长 username 用户名长度 100，唯一，非空 password 密码长度 30，非空 name 真实姓名长度 100 birthday 生日 sex 性别，定长字符串 1 telephone 手机号，字符串 11 email 邮箱，字符串长度 100 */</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_user <span class="token punctuation">(</span>     uid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>     username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     PASSWORD <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     birthday <span class="token keyword">DATE</span><span class="token punctuation">,</span>     sex CHAR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'男'</span><span class="token punctuation">,</span>     telephone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 创建收藏表 tab_favorite rid 旅游线路 id，外键 date 收藏时间 uid 用户 id，外键 rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次 */</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_favorite <span class="token punctuation">(</span>     rid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 线路id</span>     <span class="token keyword">DATE</span> <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>     uid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 用户id</span>     <span class="token comment" spellcheck="true">-- 创建复合主键</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>rid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 联合主键</span>     <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>rid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_route<span class="token punctuation">(</span>rid<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_user<span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li>数据库设计的范式</li></ol><ul><li><p>概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求</p><p>  设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。<br>  目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p></li><li><p>分类：</p><ol><li><p>第一范式（1NF）：每一列都是不可分割的原子数据项</p></li><li><p>第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）</p><ul><li>几个概念：<ol><li>函数依赖：A–&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A<br> 例如：学号–&gt;姓名。  （学号，课程名称） –&gt; 分数</li><li>完全函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。<br> 例如：（学号，课程名称） –&gt; 分数</li><li>部分函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。<br> 例如：（学号，课程名称） – &gt; 姓名</li><li>传递函数依赖：A–&gt;B, B – &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A<br> 例如：学号–&gt;系名，系名–&gt;系主任</li><li>码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码<br> 例如：该表中码为：（学号，课程名称）<ul><li>主属性：码属性组中的所有属性</li><li>非主属性：除过码属性组的属性</li></ul></li></ol></li></ul></li><li><p>第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</p></li></ol></li></ul><h2 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h2><ol><li>命令行：<ul><li>语法：<ul><li>备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</li><li>还原：<ol><li>登录数据库</li><li>创建数据库</li><li>使用数据库</li><li>执行文件。source 文件路径</li></ol></li></ul></li></ul></li><li>图形化工具：</li></ol><h2 id="多表查询："><a href="#多表查询：" class="headerlink" title="多表查询："></a>多表查询：</h2><ul><li><p>查询语法：<br>  select</p><pre><code>  列名列表</code></pre><p>  from</p><pre><code>  表名列表</code></pre><p>  where….</p></li><li><p>准备sql</p><pre class="line-numbers language-sql"><code class="language-sql">  <span class="token comment" spellcheck="true"># 创建部门表</span>  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dept<span class="token punctuation">(</span>      id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>      NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> dept <span class="token punctuation">(</span>NAME<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'开发部'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'市场部'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'财务部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 创建员工表</span>  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp <span class="token punctuation">(</span>      id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>      NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      gender CHAR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 性别</span>      salary <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 工资</span>      join_date <span class="token keyword">DATE</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 入职日期</span>      dept_id <span class="token keyword">INT</span><span class="token punctuation">,</span>      <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> dept<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 外键，关联部门表(部门表的主键)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>join_date<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">7200</span><span class="token punctuation">,</span><span class="token string">'2013-02-24'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>join_date<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'猪八戒'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">3600</span><span class="token punctuation">,</span><span class="token string">'2010-12-02'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>join_date<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'唐僧'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">9000</span><span class="token punctuation">,</span><span class="token string">'2008-08-08'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>join_date<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'白骨精'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token string">'2015-10-07'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>join_date<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'蜘蛛精'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token number">4500</span><span class="token punctuation">,</span><span class="token string">'2011-03-14'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>笛卡尔积：</p><ul><li>有两个集合A,B .取这两个集合的所有组成情况。</li><li>要完成多表查询，需要消除无用的数据</li></ul></li><li><p>多表查询的分类：</p><ol><li><p>内连接查询：</p><ol><li><p>隐式内连接：使用where条件消除无用数据</p><ul><li><p>例子：</p><pre class="line-numbers language-sql"><code class="language-sql">  <span class="token comment" spellcheck="true">-- 查询所有员工信息和对应的部门信息</span>  <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token operator">=</span> dept<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 查询员工表的名称，性别。部门表的名称</span>  <span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>name<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>dept<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token operator">=</span> dept<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span>  <span class="token keyword">SELECT</span>       t1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 员工表的姓名</span>      t1<span class="token punctuation">.</span>gender<span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 员工表的性别</span>      t2<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">-- 部门表的名称</span>  <span class="token keyword">FROM</span>      emp t1<span class="token punctuation">,</span>      dept t2  <span class="token keyword">WHERE</span>       t1<span class="token punctuation">.</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>显式内连接：</p><ul><li>语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件</li><li>例如：<pre class="line-numbers language-sql"><code class="language-sql">  <span class="token operator">*</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token operator">=</span> dept<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span>      <span class="token operator">*</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">JOIN</span> dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token operator">=</span> dept<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>内连接查询：</p><ol><li>从哪些表中查询数据</li><li>条件是什么</li><li>查询哪些字段</li></ol></li></ol></li><li><p>外链接查询：</p><ol><li>左外连接：<ul><li>语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；</li><li>查询的是左表所有数据以及其交集部分。</li><li>例子：<pre class="line-numbers language-sql"><code class="language-sql">  <span class="token comment" spellcheck="true">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span>  <span class="token keyword">SELECT</span>     t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> emp t1 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> dept t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li>右外连接：<ul><li>语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；</li><li>查询的是右表所有数据以及其交集部分。</li><li>例子：<pre class="line-numbers language-sql"><code class="language-sql">  <span class="token keyword">SELECT</span>     <span class="token operator">*</span> <span class="token keyword">FROM</span> dept t2 <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> emp t1 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol></li><li><p>子查询：</p><ul><li><p>概念：查询中嵌套查询，称嵌套查询为子查询。</p><pre class="line-numbers language-sql"><code class="language-sql">  <span class="token comment" spellcheck="true">-- 查询工资最高的员工信息</span>  <span class="token comment" spellcheck="true">-- 1 查询最高的工资是多少 9000</span>  <span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 2 查询员工信息，并且工资等于9000的</span>  <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 一条sql就完成这个操作。子查询</span>  <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子查询不同情况</p><ol><li><p>子查询的结果是单行单列的：</p><ul><li>子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;= &lt; &lt;= =</li><li></li></ul><p> – 查询员工工资小于平均工资的人<br> SELECT * FROM emp WHERE emp.salary &lt; (SELECT AVG(salary) FROM emp);</p></li><li><p>子查询的结果是多行单列的：</p><ul><li>子查询可以作为条件，使用运算符in来判断</li></ul><p> – 查询’财务部’和’市场部’所有的员工信息<br> SELECT id FROM dept WHERE NAME = ‘财务部’ OR NAME = ‘市场部’;<br> SELECT <em> FROM emp WHERE dept_id = 3 OR dept_id = 2;<br> – 子查询<br> SELECT </em> FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = ‘财务部’ OR NAME = ‘市场部’);</p></li><li><p>子查询的结果是多行多列的：</p><ul><li>子查询可以作为一张虚拟表参与查询</li></ul><p> – 查询员工入职日期是2011-11-11日之后的员工信息和部门信息<br> – 子查询<br> SELECT <em> FROM dept t1 ,(SELECT </em> FROM emp WHERE emp.<code>join_date</code> &gt; ‘2011-11-11’) t2<br> WHERE t1.id = t2.dept_id;</p><p> – 普通内连接<br> SELECT * FROM emp t1,dept t2 WHERE t1.<code>dept_id</code> = t2.<code>id</code> AND t1.<code>join_date</code> &gt;  ‘2011-11-11’</p></li></ol></li></ul></li></ol></li><li><p>多表查询练习</p><pre class="line-numbers language-sql"><code class="language-sql">  <span class="token comment" spellcheck="true">-- 部门表</span>  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dept <span class="token punctuation">(</span>      id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 部门id</span>      dname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 部门名称</span>      loc <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 部门所在地</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 添加4个部门</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> dept<span class="token punctuation">(</span>id<span class="token punctuation">,</span>dname<span class="token punctuation">,</span>loc<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>   <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'教研部'</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'学工部'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">'销售部'</span><span class="token punctuation">,</span><span class="token string">'广州'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token string">'财务部'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 职务表，职务名称，职务描述</span>  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> job <span class="token punctuation">(</span>      id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>      jname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      description <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 添加4个职务</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> job <span class="token punctuation">(</span>id<span class="token punctuation">,</span> jname<span class="token punctuation">,</span> description<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'董事长'</span><span class="token punctuation">,</span> <span class="token string">'管理整个公司，接单'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'经理'</span><span class="token punctuation">,</span> <span class="token string">'管理部门员工'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'销售员'</span><span class="token punctuation">,</span> <span class="token string">'向客人推销产品'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'文员'</span><span class="token punctuation">,</span> <span class="token string">'使用办公软件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 员工表</span>  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp <span class="token punctuation">(</span>      id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 员工id</span>      ename <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 员工姓名</span>      job_id <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 职务id</span>      mgr <span class="token keyword">INT</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 上级领导</span>      joindate <span class="token keyword">DATE</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 入职日期</span>      salary <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 工资</span>      bonus <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 奖金</span>      dept_id <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 所在部门编号</span>      <span class="token keyword">CONSTRAINT</span> emp_jobid_ref_job_id_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>job_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> job <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">CONSTRAINT</span> emp_deptid_ref_dept_id_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> dept <span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 添加员工</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span>mgr<span class="token punctuation">,</span>joindate<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>bonus<span class="token punctuation">,</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>   <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">,</span><span class="token string">'2000-12-17'</span><span class="token punctuation">,</span><span class="token string">'8000.00'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">'卢俊义'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1006</span><span class="token punctuation">,</span><span class="token string">'2001-02-20'</span><span class="token punctuation">,</span><span class="token string">'16000.00'</span><span class="token punctuation">,</span><span class="token string">'3000.00'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">'林冲'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1006</span><span class="token punctuation">,</span><span class="token string">'2001-02-22'</span><span class="token punctuation">,</span><span class="token string">'12500.00'</span><span class="token punctuation">,</span><span class="token string">'5000.00'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span><span class="token string">'唐僧'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1009</span><span class="token punctuation">,</span><span class="token string">'2001-04-02'</span><span class="token punctuation">,</span><span class="token string">'29750.00'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span><span class="token string">'李逵'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1006</span><span class="token punctuation">,</span><span class="token string">'2001-09-28'</span><span class="token punctuation">,</span><span class="token string">'12500.00'</span><span class="token punctuation">,</span><span class="token string">'14000.00'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">,</span><span class="token string">'宋江'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1009</span><span class="token punctuation">,</span><span class="token string">'2001-05-01'</span><span class="token punctuation">,</span><span class="token string">'28500.00'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1007</span><span class="token punctuation">,</span><span class="token string">'刘备'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1009</span><span class="token punctuation">,</span><span class="token string">'2001-09-01'</span><span class="token punctuation">,</span><span class="token string">'24500.00'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1008</span><span class="token punctuation">,</span><span class="token string">'猪八戒'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">,</span><span class="token string">'2007-04-19'</span><span class="token punctuation">,</span><span class="token string">'30000.00'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1009</span><span class="token punctuation">,</span><span class="token string">'罗贯中'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'2001-11-17'</span><span class="token punctuation">,</span><span class="token string">'50000.00'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1010</span><span class="token punctuation">,</span><span class="token string">'吴用'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1006</span><span class="token punctuation">,</span><span class="token string">'2001-09-08'</span><span class="token punctuation">,</span><span class="token string">'15000.00'</span><span class="token punctuation">,</span><span class="token string">'0.00'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1011</span><span class="token punctuation">,</span><span class="token string">'沙僧'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">,</span><span class="token string">'2007-05-23'</span><span class="token punctuation">,</span><span class="token string">'11000.00'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1012</span><span class="token punctuation">,</span><span class="token string">'李逵'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1006</span><span class="token punctuation">,</span><span class="token string">'2001-12-03'</span><span class="token punctuation">,</span><span class="token string">'9500.00'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1013</span><span class="token punctuation">,</span><span class="token string">'小白龙'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">,</span><span class="token string">'2001-12-03'</span><span class="token punctuation">,</span><span class="token string">'30000.00'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">1014</span><span class="token punctuation">,</span><span class="token string">'关羽'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1007</span><span class="token punctuation">,</span><span class="token string">'2002-01-23'</span><span class="token punctuation">,</span><span class="token string">'13000.00'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 工资等级表</span>  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> salarygrade <span class="token punctuation">(</span>      grade <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">-- 级别</span>      losalary <span class="token keyword">INT</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">-- 最低工资</span>      hisalary <span class="token keyword">INT</span> <span class="token comment" spellcheck="true">-- 最高工资</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 添加5个工资等级</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> salarygrade<span class="token punctuation">(</span>grade<span class="token punctuation">,</span>losalary<span class="token punctuation">,</span>hisalary<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>   <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7000</span><span class="token punctuation">,</span><span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">12010</span><span class="token punctuation">,</span><span class="token number">14000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">14010</span><span class="token punctuation">,</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">20010</span><span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">30010</span><span class="token punctuation">,</span><span class="token number">99990</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 需求：</span>  <span class="token comment" spellcheck="true">-- 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</span>  <span class="token comment" spellcheck="true">/*      分析：          1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表          2.查询条件 emp.job_id = job.id  */</span>  <span class="token keyword">SELECT</span>       t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 员工编号</span>      t1<span class="token punctuation">.</span><span class="token punctuation">`</span>ename<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 员工姓名</span>      t1<span class="token punctuation">.</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 工资</span>      t2<span class="token punctuation">.</span><span class="token punctuation">`</span>jname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 职务名称</span>      t2<span class="token punctuation">.</span><span class="token punctuation">`</span>description<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">-- 职务描述</span>  <span class="token keyword">FROM</span>       emp t1<span class="token punctuation">,</span> job t2  <span class="token keyword">WHERE</span>       t1<span class="token punctuation">.</span><span class="token punctuation">`</span>job_id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</span>  <span class="token comment" spellcheck="true">/*      分析：          1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept          2. 条件： emp.job_id = job.id and emp.dept_id = dept.id  */</span>  <span class="token keyword">SELECT</span>       t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 员工编号</span>      t1<span class="token punctuation">.</span><span class="token punctuation">`</span>ename<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 员工姓名</span>      t1<span class="token punctuation">.</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 工资</span>      t2<span class="token punctuation">.</span><span class="token punctuation">`</span>jname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 职务名称</span>      t2<span class="token punctuation">.</span><span class="token punctuation">`</span>description<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 职务描述</span>      t3<span class="token punctuation">.</span><span class="token punctuation">`</span>dname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 部门名称</span>      t3<span class="token punctuation">.</span><span class="token punctuation">`</span>loc<span class="token punctuation">`</span> <span class="token comment" spellcheck="true">-- 部门位置</span>  <span class="token keyword">FROM</span>       emp t1<span class="token punctuation">,</span> job t2<span class="token punctuation">,</span>dept t3  <span class="token keyword">WHERE</span>       t1<span class="token punctuation">.</span><span class="token punctuation">`</span>job_id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">AND</span> t1<span class="token punctuation">.</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token operator">=</span> t3<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 3.查询员工姓名，工资，工资等级</span>  <span class="token comment" spellcheck="true">/*      分析：          1.员工姓名，工资 emp  工资等级 salarygrade          2.条件 emp.salary >= salarygrade.losalary and emp.salary &lt;= salarygrade.hisalary              emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary  */</span>  <span class="token keyword">SELECT</span>       t1<span class="token punctuation">.</span>ename <span class="token punctuation">,</span>      t1<span class="token punctuation">.</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span><span class="token punctuation">,</span>      t2<span class="token punctuation">.</span><span class="token operator">*</span>  <span class="token keyword">FROM</span> emp t1<span class="token punctuation">,</span> salarygrade t2  <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span> <span class="token operator">BETWEEN</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>losalary<span class="token punctuation">`</span> <span class="token operator">AND</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>hisalary<span class="token punctuation">`</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</span>  <span class="token comment" spellcheck="true">/*      分析：          1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade          2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary  */</span>  <span class="token keyword">SELECT</span>       t1<span class="token punctuation">.</span><span class="token punctuation">`</span>ename<span class="token punctuation">`</span><span class="token punctuation">,</span>      t1<span class="token punctuation">.</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span><span class="token punctuation">,</span>      t2<span class="token punctuation">.</span><span class="token punctuation">`</span>jname<span class="token punctuation">`</span><span class="token punctuation">,</span>      t2<span class="token punctuation">.</span><span class="token punctuation">`</span>description<span class="token punctuation">`</span><span class="token punctuation">,</span>      t3<span class="token punctuation">.</span><span class="token punctuation">`</span>dname<span class="token punctuation">`</span><span class="token punctuation">,</span>      t3<span class="token punctuation">.</span><span class="token punctuation">`</span>loc<span class="token punctuation">`</span><span class="token punctuation">,</span>      t4<span class="token punctuation">.</span><span class="token punctuation">`</span>grade<span class="token punctuation">`</span>  <span class="token keyword">FROM</span>       emp t1<span class="token punctuation">,</span>job t2<span class="token punctuation">,</span>dept t3<span class="token punctuation">,</span>salarygrade t4  <span class="token keyword">WHERE</span>       t1<span class="token punctuation">.</span><span class="token punctuation">`</span>job_id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span>       <span class="token operator">AND</span> t1<span class="token punctuation">.</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token operator">=</span> t3<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span>      <span class="token operator">AND</span> t1<span class="token punctuation">.</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span> <span class="token operator">BETWEEN</span> t4<span class="token punctuation">.</span><span class="token punctuation">`</span>losalary<span class="token punctuation">`</span> <span class="token operator">AND</span> t4<span class="token punctuation">.</span><span class="token punctuation">`</span>hisalary<span class="token punctuation">`</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 5.查询出部门编号、部门名称、部门位置、部门人数</span>  <span class="token comment" spellcheck="true">/*      分析：          1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表          2.使用分组查询。按照emp.dept_id完成分组，查询count(id)          3.使用子查询将第2步的查询结果和dept表进行关联查询  */</span>  <span class="token keyword">SELECT</span>       t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>dname<span class="token punctuation">`</span><span class="token punctuation">,</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>loc<span class="token punctuation">`</span> <span class="token punctuation">,</span> t2<span class="token punctuation">.</span>total  <span class="token keyword">FROM</span>       dept t1<span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token keyword">SELECT</span>          dept_id<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> total      <span class="token keyword">FROM</span>           emp      <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> dept_id<span class="token punctuation">)</span> t2  <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询</span>  <span class="token comment" spellcheck="true">/*      分析：          1.姓名 emp， 直接上级的姓名 emp              * emp表的id 和 mgr 是自关联          2.条件 emp.id = emp.mgr          3.查询左表的所有数据，和 交集数据              * 使用左外连接查询  */</span>  <span class="token comment" spellcheck="true">/*  select      t1.ename,      t1.mgr,      t2.`id`,      t2.ename  from emp t1, emp t2  where t1.mgr = t2.`id`;  */</span>  <span class="token keyword">SELECT</span>       t1<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>      t1<span class="token punctuation">.</span>mgr<span class="token punctuation">,</span>      t2<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span>      t2<span class="token punctuation">.</span><span class="token punctuation">`</span>ename<span class="token punctuation">`</span>  <span class="token keyword">FROM</span> emp t1  <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> emp t2  <span class="token keyword">ON</span> t1<span class="token punctuation">.</span><span class="token punctuation">`</span>mgr<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ol><li><p>事务的基本介绍</p><ol><li><p>概念：</p><ul><li>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</li></ul></li><li><p>操作：</p><ol><li>开启事务： start transaction;</li><li>回滚：rollback;</li><li>提交：commit;</li></ol></li><li><p>例子：</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> account <span class="token punctuation">(</span>     id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>     NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     balance <span class="token keyword">DOUBLE</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 添加数据</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token punctuation">(</span>NAME<span class="token punctuation">,</span> balance<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account<span class="token punctuation">;</span> <span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 张三给李四转账 500 元</span> <span class="token comment" spellcheck="true">-- 0. 开启事务</span> <span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 1. 张三账户 -500</span> <span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">500</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 2. 李四账户 +500</span> <span class="token comment" spellcheck="true">-- 出错了...</span> <span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">500</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 发现执行没有问题，提交事务</span> <span class="token keyword">COMMIT</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 发现出问题了，回滚事务</span> <span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>MySQL数据库中事务默认自动提交</p><ul><li>事务提交的两种方式：<ul><li>自动提交：<ul><li>mysql就是自动提交的</li><li>一条DML(增删改)语句会自动提交一次事务。</li></ul></li><li>手动提交：<ul><li>Oracle 数据库默认是手动提交事务</li><li>需要先开启事务，再提交</li></ul></li></ul></li><li>修改事务的默认提交方式：<ul><li>查看事务的默认提交方式：SELECT @@autocommit; – 1 代表自动提交  0 代表手动提交</li><li>修改默认提交方式： set @@autocommit = 0;</li></ul></li></ul></li></ol></li></ol><ol start="2"><li><p>事务的四大特征：</p><ol><li>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</li><li>持久性：当事务提交或回滚后，数据库会持久化的保存数据。</li><li>隔离性：多个事务之间。相互独立。</li><li>一致性：事务操作前后，数据总量不变</li></ol></li><li><p>事务的隔离级别（了解）</p><ul><li><p>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p></li><li><p>存在问题：</p><ol><li>脏读：一个事务，读取到另一个事务中没有提交的数据</li><li>不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。</li><li>幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</li></ol></li><li><p>隔离级别：</p><ol><li>read uncommitted：读未提交<ul><li>产生的问题：脏读、不可重复读、幻读</li></ul></li><li>read committed：读已提交 （Oracle）<ul><li>产生的问题：不可重复读、幻读</li></ul></li><li>repeatable read：可重复读 （MySQL默认）<ul><li>产生的问题：幻读</li></ul></li><li>serializable：串行化<ul><li>可以解决所有的问题</li></ul></li></ol><ul><li>注意：隔离级别从小到大安全性越来越高，但是效率越来越低</li><li>数据库查询隔离级别：<ul><li>select @@tx_isolation;</li></ul></li><li>数据库设置隔离级别：<ul><li>set global transaction isolation level  级别字符串;</li></ul></li></ul></li><li><p>演示：</p><pre class="line-numbers language-sql"><code class="language-sql">  <span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span>  <span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 转账操作</span>  <span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">500</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">500</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="DCL："><a href="#DCL：" class="headerlink" title="DCL："></a>DCL：</h2><ul><li><p>SQL分类：</p><ol><li>DDL：操作数据库和表</li><li>DML：增删改表中数据</li><li>DQL：查询表中数据</li><li>DCL：管理用户，授权</li></ol></li><li><p>DBA：数据库管理员</p></li><li><p>DCL：管理用户，授权</p><ol><li><p>管理用户</p><ol><li><p>添加用户：</p><ul><li>语法：CREATE USER ‘用户名‘@’主机名’ IDENTIFIED BY ‘密码’;</li></ul></li><li><p>删除用户：</p><ul><li>语法：DROP USER ‘用户名‘@’主机名’;</li></ul></li><li><p>修改用户密码：</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">UPDATE</span> <span class="token keyword">USER</span> <span class="token keyword">SET</span> PASSWORD <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> <span class="token keyword">USER</span> <span class="token operator">=</span> <span class="token string">'用户名'</span><span class="token punctuation">;</span> <span class="token keyword">UPDATE</span> <span class="token keyword">USER</span> <span class="token keyword">SET</span> PASSWORD <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> <span class="token keyword">USER</span> <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token punctuation">;</span> <span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> <span class="token string">'用户名'</span>@'主机名<span class="token string">' = PASSWORD('</span>新密码<span class="token string">'); SET PASSWORD FOR '</span>root<span class="token string">'@'</span>localhost<span class="token string">' = PASSWORD('</span><span class="token number">123</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>mysql中忘记了root用户的密码？</p><ol><li><p>cmd – &gt; net stop mysql 停止mysql服务</p><ul><li>需要管理员运行该cmd</li></ul></li><li><p>使用无验证方式启动mysql服务： mysqld –skip-grant-tables</p></li><li><p>打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</p></li><li><p>use mysql;</p></li><li><p>update user set password = password(‘你的新密码’) where user = ‘root’;</p></li><li><p>关闭两个窗口</p></li><li><p>打开任务管理器，手动结束mysqld.exe 的进程</p></li><li><p>启动mysql服务</p></li><li><p>使用新密码登录。</p></li></ol></li></ul></li><li><p>查询用户：<br> – 1. 切换到mysql数据库<br> USE myql;<br> – 2. 查询user表<br> SELECT * FROM USER;</p><ul><li>通配符： % 表示可以在任意主机使用用户登录数据库</li></ul></li></ol></li><li><p>权限管理：</p><ol><li><p>查询权限：<br> – 查询权限<br> SHOW GRANTS FOR ‘用户名‘@’主机名’;<br> SHOW GRANTS FOR ‘lisi’@’%’;</p></li><li><p>授予权限：<br> – 授予权限<br> grant 权限列表 on 数据库名.表名 to ‘用户名‘@’主机名’;<br> – 给张三用户授予所有权限，在任意数据库任意表上</p><p> GRANT ALL ON <em>.</em> TO ‘zhangsan’@’localhost’;</p></li><li><p>撤销权限：<br> – 撤销权限：<br> revoke 权限列表 on 数据库名.表名 from ‘用户名‘@’主机名’;<br> REVOKE UPDATE ON db3.<code>account</code> FROM ‘lisi’@’%’;</p></li></ol></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高级知识</title>
      <link href="/2019/12/10/java-advance/"/>
      <url>/2019/12/10/java-advance/</url>
      
        <content type="html"><![CDATA[<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><ul><li><code>java.util.HashSet</code> 底层的实现其实是一个<code>java.util.HashMap</code> 支持。</li><li>HashSet集合存储数据的结构（哈希表）<br>在JDK1.8之前，哈希表底层采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。而JDK1.8中，哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。简单的来说，哈希表是由数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下图所示。<br><img src="https://i.imgur.com/N5szJnF.jpg" alt="哈希表"></li><li>可变参数。同样是代表数组，但是在调用这个带有可变参数的方法时，不用创建数组(这就是简单之处)，直接将数组中的元素作为实际参数进行传递，其实编译成的class文件，将这些元素先封装到一个数组中，在进行传递。这些动作都在编译.class文件时，自动完成了。如果在方法书写时，这个方法拥有多参数，参数中包含可变参数，可变参数一定要写在参数列表的末尾位置。</li><li><a href="https://www.jianshu.com/p/63e76826e852" title="集合框架" target="_blank" rel="noopener">https://www.jianshu.com/p/63e76826e852</a></li><li>使用put方法时，若指定的键(key)在集合中没有，则没有这个键对应的值，返回null，并把指定的键值添加到集合中；若指定的键(key)在集合中存在，则返回值为集合中键对应的值（该值为替换前的值），并把指定键所对应的值，替换成指定的新值。</li><li>Comparable 和 Comparator 的对比<br>Comparable 更像是自然排序<br>Comparator 更像是定制排序<br>同时存在时采用 Comparator（定制排序）的规则进行比较。对于一些普通的数据类型（比如 String, Integer, Double…），它们默认实现了Comparable 接口，实现了 compareTo 方法，我们可以直接使用。而对于一些自定义类，它们可能在不同情况下需要实现不同的比较策略，我们可以新创建 Comparator 接口，然后使用特定的 Comparator 实现进行比较。<br><img src="https://i.imgur.com/khQN4IB.png" alt="对比"></li></ul><hr><h1 id="异常和线程"><a href="#异常和线程" class="headerlink" title="异常和线程"></a>异常和线程</h1><ul><li>异常的分类<br><img src="https://i.imgur.com/vQAtiaH.png" alt="异常分类"></li><li>多线程执行时，在栈内存中，其实每一个执行线程都有一片自己所属的栈内存空间。进行方法的压栈和弹栈。当执行线程的任务结束了，线程自动在栈内存中释放了。但是当所有的执行线程都结束了，那么进程就结束了。</li><li>Thread和Runnable的区别<br><img src="https://i.imgur.com/842axaw.png" alt="Thread和Runnable的区别"></li><li>线程安全问题都是由全局变量及静态变量引起的。若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</li><li>线程同步。<ol><li>同步代码块</li><li>同步方法：对于非static方法,同步锁就是this。对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。</li><li>锁机制</li></ol></li><li>线程状态<br><img src="https://i.imgur.com/bkpUhty.png" alt="线程状态"><br><img src="https://i.imgur.com/h30OsO3.png" alt="状态转移"></li><li>线程池：其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</li><li>Lambda省略：<ol><li>小括号内参数的类型可以省略；</li><li>如果小括号内有且仅有一个参，则小括号可以省略；</li><li>如果大括号内有且仅有一个语句，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。<br><img src="https://i.imgur.com/rCZGMrn.png" alt="注意事项"></li></ol></li></ul><hr><h1 id="File类和IO流"><a href="#File类和IO流" class="headerlink" title="File类和IO流"></a>File类和IO流</h1><ul><li><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</li><li><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。<ul><li><code>java.io.FileFilter</code>是一个接口，是File的过滤器。 该接口的对象可以传递给File类的<code>listFiles(FileFilter)</code>作为参数，接口中只有一个方法。<code>boolean accept(File pathname)</code>：测试pathname是否应该包含在当前File目录中，符合则返回true。</li></ul></li><li>分类<br><img src="https://i.imgur.com/PS1aD9a.jpg" alt="分类"></li><li><code>java.util.Properties</code> 继承于<code>Hashtable</code> ，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一个字符串。该类也被许多Java类使用，比如获取系统属性时， <code>System.getProperties</code> 方法就是返回一个<code>Properties</code>对象。</li><li>序列化<br><img src="https://i.imgur.com/DIvNllw.png" alt="序列化"></li></ul><hr><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><ul><li><code>java.util.function.Supplier&lt;T&gt;</code> 接口仅包含一个无参的方法： <code>T get()</code> 。用来获取一个泛型参数指定类型的对象数据。由于这是一个函数式接口，这也就意味着对应的Lambda表达式需要“对外提供”一个符合泛型类型的对象数据。</li><li><code>java.util.function.Consumer&lt;T&gt;</code> 接口则正好与Supplier接口相反，它不是生产一个数据，而是消费一个数据，其数据类型由泛型决定。    1. Consumer接口中包含抽象方法<code>void accept(T t)</code> ，意为消费一个指定泛型的数据。<ol start="2"><li>如果一个方法的参数和返回值全都是Consumer 类型，那么就可以实现效果：消费数据的时候，首先做一个操作，然后再做一个操作，实现组合。而这个方法就是Consumer接口中的default方法<code>andThen</code></li></ol></li><li>有时候我们需要对某种类型的数据进行判断，从而得到一个boolean值结果。这时可以使用<code>java.util.function.Predicate&lt;T&gt;</code> 接口。<ol><li>抽象方法。<code>boolean test(T t)</code> 。用于条件判断。</li><li>默认方法。and、or、negate</li></ol></li><li><code>java.util.function.Function&lt;T,R&gt;</code> 接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件。Function的前置条件泛型和后置条件泛型可以相同。<ol><li>Function 接口中最主要的抽象方法为： <code>R apply(T t)</code> ，根据类型T的参数获取类型R的结果。</li><li>Function 接口中有一个默认的<code>andThen</code> 方法，用来进行组合操作。</li></ol></li></ul><hr><h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><ul><li>获取流<ol><li>所有的Collection 集合都可以通过stream 默认方法获取流；</li><li>Stream 接口的静态方法of 可以获取数组对应的流。</li></ol></li><li>常用方法<ol><li><code>void forEach(Consumer&lt;? super T&gt; action);</code></li><li><code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</code>。可以通过filter 方法将一个流转换成另一个子集流。</li><li><code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</code>将流中的元素映射到另一个流中，可以使用map 方法。</li><li><code>long count();</code>。正如旧集合Collection 当中的size 方法一样，流提供count 方法来数一数其中的元素个数。</li><li><code>Stream&lt;T&gt; limit(long maxSize);</code>。limit 方法可以对流进行截取，只取用前n个。</li><li><code>Stream&lt;T&gt; skip(long n);</code>。如果希望跳过前几个元素，可以使用skip 方法获取一个截取之后的新流。</li><li><code>static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</code>。合并成为一个流。</li></ol></li></ul><hr><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li><p>获取Class对象的方式：</p><ol><li>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li>类名.class：通过类名的属性class获取<ul><li>多用于参数的传递</li></ul></li><li>对象.getClass()：getClass()方法在Object类中定义着。<ul><li>多用于对象的获取字节码的方式</li></ul></li></ol><ul><li>结论：<br>  同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</li></ul></li><li><p>Class对象功能：</p><ul><li><p>获取功能：</p><ol><li><p>获取成员变量们</p><ul><li><p>Field[] getFields() ：获取所有public修饰的成员变量</p></li><li><p>Field getField(String name)   获取指定名称的 public修饰的成员变量</p></li><li><p>Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符</p></li><li><p>Field getDeclaredField(String name)  </p></li></ul></li><li><p>获取构造方法们</p><ul><li><p>Constructor&lt;?&gt;[] getConstructors()  </p></li><li><p>Constructor<t> getConstructor(类&lt;?&gt;… parameterTypes)  </t></p></li><li><p>Constructor<t> getDeclaredConstructor(类&lt;?&gt;… parameterTypes)  </t></p></li><li><p>Constructor&lt;?&gt;[] getDeclaredConstructors()  </p></li></ul></li><li><p>获取成员方法们：</p><ul><li><p>Method[] getMethods()  </p></li><li><p>Method getMethod(String name, 类&lt;?&gt;… parameterTypes)  </p></li><li><p>Method[] getDeclaredMethods()  </p></li><li><p>Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)  </p></li></ul></li><li><p>获取全类名    </p><ul><li>String getName() </li></ul></li></ol></li></ul></li><li><p>Field：成员变量</p><ul><li><p>操作：</p><ol><li><p>设置值</p><ul><li>void set(Object obj, Object value)  </li></ul></li><li><p>获取值</p><ul><li>get(Object obj) </li></ul></li><li><p>忽略访问权限修饰符的安全检查</p><ul><li>setAccessible(true):暴力反射</li></ul></li></ol></li></ul></li></ul><ul><li><p>Constructor:构造方法</p><ul><li><p>创建对象：</p><ul><li><p>T newInstance(Object… initargs)  </p></li><li><p>如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</p></li></ul></li></ul></li></ul><ul><li><p>Method：方法对象</p><ul><li><p>执行方法：</p><ul><li>Object invoke(Object obj, Object… args)  </li></ul></li><li><p>获取方法名称：</p><ul><li>String getName:获取方法名</li></ul></li></ul></li></ul><hr><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul><li><p>概念：说明程序的。给计算机看的</p></li><li><p>注释：用文字描述程序的。给程序员看的</p></li><li><p>定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p></li><li><p>概念描述：</p><ul><li>JDK1.5之后的新特性</li><li>说明程序的</li><li>使用注解：@注解名称</li></ul></li></ul><ul><li>作用分类：<br>  ①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】<br>  ②代码分析：通过代码里标识的注解对代码进行分析【使用反射】<br>  ③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li></ul><ul><li><p>JDK中预定义的一些注解</p><ul><li>@Override    ：检测被该注解标注的方法是否是继承自父类(接口)的</li><li>@Deprecated：该注解标注的内容，表示已过时</li><li>@SuppressWarnings：压制警告<ul><li>一般传递参数all  @SuppressWarnings(“all”)</li></ul></li></ul></li><li><p>自定义注解</p><ul><li><p>格式：<br>  元注解<br>  public @interface 注解名称{</p><pre><code>  属性列表;</code></pre><p>  }</p></li><li><p>本质：注解本质上就是一个接口，该接口默认继承Annotation接口</p><ul><li>public interface MyAnno extends java.lang.annotation.Annotation {}</li></ul></li><li><p>属性：接口中的抽象方法</p><ul><li><p>要求：</p><ol><li><p>属性的返回值类型有下列取值</p><ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li><p>定义了属性，在使用时需要给属性赋值</p><ol><li>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</li><li>如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。</li><li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</li></ol></li></ol></li></ul></li><li><p>元注解：用于描述注解的注解</p><ul><li>@Target：描述注解能够作用的位置<ul><li>ElementType取值：<ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul></li></ul></li><li>@Retention：描述注解被保留的阶段<ul><li>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li></ul></li><li>@Documented：描述注解是否被抽取到api文档中</li><li>@Inherited：描述注解是否被子类继承</li></ul></li></ul></li></ul><ul><li><p>在程序使用(解析)注解：获取注解中定义的属性值</p><ol><li><p>获取注解定义的位置的对象  （Class，Method,Field）</p></li><li><p>获取指定的注解</p><ul><li><p>getAnnotation(Class)<br>//其实就是在内存中生成了一个该注解接口的子类实现对象</p><pre><code>  public class ProImpl implements Pro{      public String className(){          return &quot;cn.itcast.annotation.Demo1&quot;;      }      public String methodName(){          return &quot;show&quot;;      }  }</code></pre></li></ul></li><li><p>调用注解中的抽象方法获取配置的属性值</p></li></ol></li><li><p>小结：</p><ol><li>以后大多数时候，我们会使用注解，而不是自定义注解</li><li>注解给谁用？<ol><li>编译器</li><li>给解析程序用</li></ol></li><li>注解不是程序的一部分，可以理解为注解就是一个标签</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识点总结</title>
      <link href="/2019/12/09/hello-world/"/>
      <url>/2019/12/09/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="Java基础知识"><a href="#Java基础知识" class="headerlink" title="Java基础知识"></a><strong>Java基础知识</strong></h3><ul><li><p>在Java中，所有的数值类型所占据的字节数量与平台无关。</p></li><li><p>Java实际上没有多维数组，只有一维数组。</p></li><li><p>一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。</p></li><li><p>构造器总是伴随着new操作符的执行被调用。</p></li><li><p>可以认为静态方法是没有this参数的方法。</p></li><li><p><strong>Java程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</strong></p></li><li><p>必须明确地初始化方法中的局部变量。但是，如果没有初始化类中的域，将会自动初始化为默认值（0，false或null）。</p></li><li><p>在Java 中，所有的继承都是公有继承。</p></li><li><p>有些人认为super与this引用是类似的概念， 实际上，这样比较并不太恰当。这是因为super不是一个对象的引用，不能将super赋给另一个对象变量，它只是一个指示编译器调用超类方法的特殊关键字。</p></li><li><p>在覆盖一个方法的时候，子类方法不能低于超类方法的可见性。</p></li><li><p>只能在继承层次内进行类型转换，在将超类转换成子类之前，应该使用instanceof进行检查。</p></li><li><p>对象包装器类是不可变的，即一旦构造了包装器，就不允许更改包装在其中的值。</p></li><li><p>equals和hashcode的定义必须兼容，即如果x.equals(y)为true，x.hashcode必须等于y.hashcode()。</p></li><li><p>抽象类中可以有构造方法（用于给子类对象进行初始化），而接口没有。</p></li><li><p>&amp;和&amp;&amp;区别： &amp; 无论左边结果是什么，右边都参与运算。&amp;&amp;短路与，如果左边为 false ，那么右边不参数与运算。类似|和||。</p></li><li><p>执行顺序：（优先级从高到低。）静态代码块&gt;mian方法&gt;构造代码块&gt;构造方法。其中静态代码块只执行一次。构造代码块在每次创建对象是都会执行。</p></li><li><p>this:代表对象。就是所在函数所属对象的引用。哪个对象调用了 this 所在的函数 this 就代表哪 个对象 就是哪个对象的引用。</p></li><li><p>因为staticstatic方法独立于任何实例，因此方法独立于任何实例，因此staticstatic方法必须被实现，而不能是抽象的方法必须被实现，而不能是抽象的abstractabstract。</p></li><li><p>成员变量存在于堆内存中。静态变量存在于方法区中。</p></li><li><p><img src="https://i.imgur.com/65QDJjg.jpg" alt></p></li><li><p>子类覆盖父类时，必须要保证，子类方法的权限必须大于等于父类方法权限可以实现继承。否则，编译失败。</p></li><li><p>同步函数使用的锁是this ，静态同步函数的锁是该类的字节码文件对象 。</p></li><li><p>wait 线程会释放执行权，而且线程会释放锁。sleep线程会释放执行权，但不是不释放锁。</p></li><li><p>对于ArrayList 集合，判断元素是否存在，或者删元素底层依据都是 equals 方法。对于HashSet 集合，判断元素是否存在，或者删除元素，底层依据的是 hashCode 方法和 equals方法。</p></li><li><p>为了优化，虚拟机为包装类提供了缓冲池， <strong>Integer 池的大小 128~127 一个字节的大小。</strong></p></li><li><p>javac常量优化。给一个变量赋值，如果等于号的右边是常量的表达式并且没有一个变量，那么就会在编译阶段计算该表达式的结果，然后判断该表达式的结果是否在左边类型所表示范围内，如果在，那么就赋值成功，如果不在，那么就赋值失败。</p></li><li><p>Class类继承Object，并且实现了若干个接口，每当classloader从class文件中加载一个类时，都会加载类型信息到方法区中，同时生成一个Class对象，该类型信息的具体数据结构根据不同的虚拟机实现而不同，但是该数据结构肯定有一个引用指向该Class对象，以便诸如String.class的时候可以获取到该Class对象，而该Class对象一定有一个引用指向该类型信息结构，以便通过Class获取fields，methods以及其他数据, 因为这些数据存在方法区中。Class对象存放在堆中。</p></li><li><p>常量池的分类：<strong>class文件常量池</strong>。常量池(Constant Pool Table)【此时没有加载进内存，也就是在文件中】，用于存放编译期生成的各种字面量和符号引用。<strong>运行时常量池</strong>。我们知道类加载器会加载对应的Class文件，而上面的class文件中的常量池，会在类加载后进入方法区中的运行时常量池【此时存在在内存中】。并且需要的注意的是，运行时常量池是全局共享的，多个类共用一个运行时常量池。并且class文件中常量池多个相同的字符串在运行时常量池只会存在一份。<strong>字符串常量池。</strong>上面我们说常量池中的字面量会在类加载后进入运行时常量池，其中字面量中有包括文本字符串，显然从这段文字我们可以知道字符串常量池存在于运行时常量池中。也就存在于方法区中。到了JDK1.7时，字符串常量池就被移出了方法区，转移到了堆里了。<strong>那么我们可以推断，到了JDK1.7以及之后的版本中，运行时常量池并没有包含字符串常量池，运行时常量池存在于方法区中，而字符串常量池存在于堆中。</strong></p></li><li><p>字符串效果上相当于char字符数组，但是底层原理是byte字节数组。</p></li><li><p>接口的内部主要就是封装了方法，包含抽象方法（JDK 7及以前），默认方法和静态方法（JDK 8），私有方法（JDK 9）。</p></li><li><p><strong>类优先。</strong>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的默认方法重名，子类就近选择执行父类的成员方法。</p></li><li><p><img src="https://i.imgur.com/zkNrmdW.jpg" alt></p></li><li><p>内部类可以直接访问外部类的成员，包括私有成员。外部类要访问内部类的成员，必须要建立内部类的对象。</p></li><li><p><img src="https://i.imgur.com/2U6IRAF.jpg" alt></p></li><li></li></ul><hr><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a><strong>内存管理</strong></h3><h4 id="1-运行时数据区域"><a href="#1-运行时数据区域" class="headerlink" title="1. 运行时数据区域"></a>1. 运行时数据区域</h4><p>Java 虚拟机在执行 Java 程序的过程中会把它所管理 的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。根据《 Java 虚拟机规范（第 2 版）》的规定， Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如下图所示：<br><img src="https://i.imgur.com/pTCHO7U.jpg" alt="运行时数据区域"></p><h4 id="2-程序计数器"><a href="#2-程序计数器" class="headerlink" title="2. 程序计数器"></a>2. 程序计数器</h4><p>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。 <strong>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。 **如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的Natvie方法，这个计数器值则为空（Undefined）。</strong>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。**</p><h4 id="3-Java虚拟机栈"><a href="#3-Java虚拟机栈" class="headerlink" title="3. Java虚拟机栈"></a>3. Java虚拟机栈</h4><p>与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）<strong>用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</strong><br><br>经常有人把Java内存区分为堆内存（Heap）和栈内存（Stack），这种分法比较粗糙，Java内存区域的划分实际上远比这复杂。这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块。其中所指的“堆”在后面会专门讲述，而所指的“栈”就是现在讲的虚拟机栈，或者说是虚拟机栈中的局部变量表部分。<br><br>局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型），它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。 <br><br><strong>其中64位长度的long和double类型的数据会占用2个局部变量空间</strong>（Slot），其余的数据类型只占用1个。<strong>局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</strong> 在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。</p><h4 id="4-本地方法栈"><a href="#4-本地方法栈" class="headerlink" title="4. 本地方法栈"></a>4. 本地方法栈</h4><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p><h4 id="5-Java堆"><a href="#5-Java堆" class="headerlink" title="5. Java堆"></a>5. Java堆</h4><p>对于大多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例</strong>，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。<br><br>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”（Garbage Collected Heap，幸好国内没翻译成“垃圾堆”）。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。如果从内存分配的角度看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）。不过，无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。在本章中，我们仅仅针对内存区域的作用进行讨论，Java堆中的上述各个区域的分配和回收等细节将会是下一章的主题。<br><br>根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p><h4 id="6-方法区"><a href="#6-方法区" class="headerlink" title="6. 方法区"></a>6. 方法区</h4><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它<strong>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</strong>虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</p><h4 id="7-运行时常量池"><a href="#7-运行时常量池" class="headerlink" title="7. 运行时常量池"></a>7. 运行时常量池</h4><p><strong>运行时常量池（Runtime Constant Pool）是方法区的一部分。</strong>Class文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant Pool Table），<strong>用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</strong> Java虚拟机对Class文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会被虚拟机认可、装载和执行。但对于运行时常量池，Java虚拟机规范没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。不过，一般来说，除了保存Class文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中。 运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只能在编译期产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。 既然运行时常量池是方法区的一部分，自然会受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><h4 id="8-对象访问"><a href="#8-对象访问" class="headerlink" title="8. 对象访问"></a>8. 对象访问</h4><p>介绍完Java虚拟机的运行时数据区之后，我们就可以来探讨一个问题：在Java语言中，对象访问是如何进行的？对象访问在Java语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及Java栈、Java堆、方法区这三个最重要内存区域之间的关联关系，如下面的这句代码： Object obj = new Object(); 假设这句代码出现在方法体中，那“Object obj”这部分的语义将会反映到Java栈的本地变量表中，作为一个reference类型数据出现。而“new Object()”这部分的语义将会反映到Java堆中，形成一块存储了Object类型所有实例数据值（Instance Data，对象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布局（Object Memory Layout）的不同，这块内存的长度是不固定的。另外，在Java堆中还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地址信息，这些类型数据则存储在方法区中。<br><br>由于reference类型在Java虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到Java堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：<em><em>使用句柄和直接指针。 </em></em>如果使用句柄访问方式，Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息，如下图所示：</p><p><img src="https://i.imgur.com/VAbtvoY.jpg" alt></p><p><strong>如果使用的是直接指针访问方式，Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference中直接存储的就是对象地址，如下图所示：</strong><br><img src="https://i.imgur.com/ES794ij.jpg" alt></p><p>这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。就本书讨论的主要虚拟机Sun HotSpot而言，它是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
